/**
 * –°—Ü–µ–Ω–∞—Ä–∏–π –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
 * 
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:
 * 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ ETH
 * 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
 * 3. –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
 * 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
 * 5. –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
 */

import { ethers } from "hardhat";
import { Signer, Log } from "ethers";
import { BaseScenario, ScenarioResult, ScenarioConfig, SubscriptionPlan, SubscriptionDeployment } from "./base-scenario";

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
 */
export class SubscriptionCancellationScenario extends BaseScenario {
    constructor(config: ScenarioConfig) {
        super(config);
    }

    async execute(): Promise<ScenarioResult> {
        console.log("\nüéØ –°–¶–ï–ù–ê–†–ò–ô: –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏");
        console.log("=".repeat(50));

        try {
            const { merchant, subscriber } = await this.getSigners();

            // –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
            const addresses = [
                await merchant.getAddress(),
                await subscriber.getAddress(),
                await this.deployment.gateway.getAddress()
            ];
            await this.analyzeBalances(addresses, ethers.ZeroAddress, "–¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏");

            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –≤ ETH
            const plan: SubscriptionPlan = {
                id: "eth-cancellation-test",
                name: "–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                price: ethers.parseEther("0.005"), // 0.005 ETH
                duration: 7 * 24 * 60 * 60, // 7 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                tokenAddress: ethers.ZeroAddress, // ETH
                merchant: await merchant.getAddress()
            };

            console.log("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ã...");
            const { contractPlan, signature } = await this.createSubscriptionPlan(merchant, plan);

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–ª–∞–Ω
            console.log("\n‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏...");
            const subscriptionTx = await this.deployment.subscriptionManager
                .connect(subscriber)
                .subscribe(contractPlan, signature, "0x", { value: plan.price });

            const subscriptionReceipt = await subscriptionTx.wait();
            console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –≥–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω:", subscriptionReceipt.gasUsed.toString());

            // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ —Å–æ–±—ã—Ç–∏—è
            const subscriptionEvent = subscriptionReceipt.logs.find((log: Log) => {
                try {
                    const parsed = this.deployment.subscriptionManager.interface.parseLog(log);
                    return parsed?.name === "SubscriptionCreated";
                } catch {
                    return false;
                }
            });

            if (!subscriptionEvent) {
                throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ SubscriptionCreated");
            }

            const parsedSubscriptionEvent = this.deployment.subscriptionManager.interface.parseLog(subscriptionEvent);
            if (!parsedSubscriptionEvent) {
                throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ SubscriptionCreated");
            }
            const subscriptionId = parsedSubscriptionEvent.args.subscriptionId;

            console.log("üìã ID –ø–æ–¥–ø–∏—Å–∫–∏:", subscriptionId);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–æ –æ—Ç–º–µ–Ω—ã
            console.log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–æ –æ—Ç–º–µ–Ω—ã...");
            const subscriptionInfoBefore = await this.getSubscriptionInfo(await subscriber.getAddress());

            if (subscriptionInfoBefore) {
                console.log("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–æ –æ—Ç–º–µ–Ω—ã:");
                console.log("  –ü–æ–¥–ø–∏—Å—á–∏–∫:", subscriptionInfoBefore.subscriber);
                console.log("  –ú–µ—Ä—á–∞–Ω—Ç:", subscriptionInfoBefore.merchant);
                console.log("  –¢–æ–∫–µ–Ω:", subscriptionInfoBefore.token === ethers.ZeroAddress ? "ETH" : subscriptionInfoBefore.token);
                console.log("  –°—É–º–º–∞:", ethers.formatEther(subscriptionInfoBefore.amount), "ETH");
                console.log("  –ü–µ—Ä–∏–æ–¥:", subscriptionInfoBefore.period, "—Å–µ–∫—É–Ω–¥");
                console.log("  –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂:", new Date(Number(subscriptionInfoBefore.nextPayment) * 1000).toLocaleString());
                console.log("  –ê–∫—Ç–∏–≤–Ω–∞:", subscriptionInfoBefore.isActive ? "–î–∞" : "–ù–µ—Ç");
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
            if (!subscriptionInfoBefore?.isActive) {
                throw new Error("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è");
            }

            // –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            await this.analyzeBalances(addresses, ethers.ZeroAddress, "–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏");

            // –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            console.log("\n‚ùå –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º...");
            const cancelTx = await this.deployment.subscriptionManager
                .connect(subscriber)
                .unsubscribe();

            const cancelReceipt = await cancelTx.wait();
            console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –≥–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω:", cancelReceipt.gasUsed.toString());

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω—ã
            const cancelEvent = cancelReceipt.logs.find((log: Log) => {
                try {
                    const parsed = this.deployment.subscriptionManager.interface.parseLog(log);
                    return parsed?.name === "SubscriptionCancelled";
                } catch {
                    return false;
                }
            });

            if (cancelEvent) {
                const parsedCancelEvent = this.deployment.subscriptionManager.interface.parseLog(cancelEvent);
                if (parsedCancelEvent) {
                    console.log("‚úÖ –°–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω—ã –Ω–∞–π–¥–µ–Ω–æ:", parsedCancelEvent.args);
                } else {
                    console.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω—ã");
                }
            } else {
                console.log("‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
            console.log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã...");
            const subscriptionInfoAfter = await this.getSubscriptionInfo(await subscriber.getAddress());

            if (subscriptionInfoAfter) {
                console.log("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã:");
                console.log("  –ü–æ–¥–ø–∏—Å—á–∏–∫:", subscriptionInfoAfter.subscriber);
                console.log("  –ú–µ—Ä—á–∞–Ω—Ç:", subscriptionInfoAfter.merchant);
                console.log("  –¢–æ–∫–µ–Ω:", subscriptionInfoAfter.token === ethers.ZeroAddress ? "ETH" : subscriptionInfoAfter.token);
                console.log("  –°—É–º–º–∞:", ethers.formatEther(subscriptionInfoAfter.amount), "ETH");
                console.log("  –ü–µ—Ä–∏–æ–¥:", subscriptionInfoAfter.period, "—Å–µ–∫—É–Ω–¥");
                console.log("  –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂:", new Date(Number(subscriptionInfoAfter.nextPayment) * 1000).toLocaleString());
                console.log("  –ê–∫—Ç–∏–≤–Ω–∞:", subscriptionInfoAfter.isActive ? "–î–∞" : "–ù–µ—Ç");
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
            if (subscriptionInfoAfter?.isActive) {
                throw new Error("–ü–æ–¥–ø–∏—Å–∫–∞ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã");
            }

            // –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
            await this.analyzeBalances(addresses, ethers.ZeroAddress, "–ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
            console.log("\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–º–µ–Ω—ã...");
            try {
                await this.deployment.subscriptionManager
                    .connect(subscriber)
                    .unsubscribe();
                console.log("‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ)");
            } catch (error) {
                console.log("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ (–æ–∂–∏–¥–∞–µ–º–æ):", error instanceof Error ? error.message : String(error));
            }

            console.log("\nüéâ –°—Ü–µ–Ω–∞—Ä–∏–π –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!");

            return this.createResult(
                "–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
                true,
                undefined,
                {
                    subscriptionId,
                    planPrice: ethers.formatEther(plan.price),
                    currency: "ETH",
                    duration: plan.duration,
                    merchant: await merchant.getAddress(),
                    subscriber: await subscriber.getAddress(),
                    subscriptionGasUsed: subscriptionReceipt.gasUsed.toString(),
                    cancellationGasUsed: cancelReceipt.gasUsed.toString(),
                    wasActiveBefore: subscriptionInfoBefore?.isActive,
                    isActiveAfter: subscriptionInfoAfter?.isActive
                }
            );

        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : String(error);
            console.log("\n‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:", errorMessage);

            return this.createResult(
                "–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
                false,
                errorMessage
            );
        }
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */
export async function testSubscriptionCancellation(
    deployment: SubscriptionDeployment,
    merchant?: Signer,
    subscriber?: Signer
): Promise<ScenarioResult> {
    const scenario = new SubscriptionCancellationScenario({
        deployment,
        merchant,
        subscriber
    });

    return await scenario.execute();
}
