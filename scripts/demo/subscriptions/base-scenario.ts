/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
 * 
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ–¥–ø–∏—Å–æ–∫:
 * - –ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * - –û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
 * - –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 * - –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π –∏ –±–∞–ª–∞–Ω—Å–æ–≤
 */

import { ethers } from "hardhat";
import { Signer, Contract } from "ethers";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ–ø–ª–æ—è –ø–æ–¥–ø–∏—Å–æ–∫
export interface SubscriptionDeployment {
    core: Contract;
    gateway: Contract;
    subscriptionFactory: Contract;
    subscriptionManager: Contract;
    testToken: Contract;
    moduleId: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
export interface SubscriptionPlan {
    id: string;
    name: string;
    price: bigint;
    duration: number; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    tokenAddress: string;
    merchant: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Plan struct –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
export interface ContractPlan {
    chainIds: number[];
    price: bigint;
    period: number;
    token: string;
    merchant: string;
    salt: bigint;
    expiry: number;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
export interface ScenarioResult {
    name: string;
    success: boolean;
    error?: string;
    details?: any;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
export interface ScenarioConfig {
    deployment: SubscriptionDeployment;
    merchant?: Signer;
    subscriber?: Signer;
}

/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ–¥–ø–∏—Å–æ–∫
 */
export abstract class BaseScenario {
    protected deployment: SubscriptionDeployment;
    protected merchant: Signer | undefined;
    protected subscriber: Signer | undefined;

    constructor(config: ScenarioConfig) {
        this.deployment = config.deployment;
        this.merchant = config.merchant;
        this.subscriber = config.subscriber;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ signers
     */
    protected async getSigners(): Promise<{ merchant: Signer; subscriber: Signer }> {
        if (this.merchant && this.subscriber) {
            return { merchant: this.merchant, subscriber: this.subscriber };
        }

        const signers = await ethers.getSigners();
        return {
            merchant: this.merchant || signers[1],
            subscriber: this.subscriber || signers[2]
        };
    }

    /**
     * –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
     */
    abstract execute(): Promise<ScenarioResult>;

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å EIP-712 –ø–æ–¥–ø–∏—Å—å—é
     */
    protected async createSubscriptionPlan(
        merchant: Signer,
        plan: SubscriptionPlan
    ): Promise<{ contractPlan: ContractPlan; signature: string }> {
        console.log(`üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏: ${plan.name}`);

        const network = await ethers.provider.getNetwork();
        const currentTime = Math.floor(Date.now() / 1000);

        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–ª–∞–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        const contractPlan: ContractPlan = {
            chainIds: [Number(network.chainId)],
            price: plan.price,
            period: plan.duration,
            token: plan.tokenAddress,
            merchant: plan.merchant,
            salt: BigInt(Math.floor(Math.random() * 1000000)),
            expiry: currentTime + (24 * 60 * 60) // –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 24 —á–∞—Å–∞
        };

        // –°–æ–∑–¥–∞–µ–º EIP-712 –ø–æ–¥–ø–∏—Å—å - –¥–æ–ª–∂–Ω–æ —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å DOMAIN_SEPARATOR –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
        const domain = {
            chainId: network.chainId,
            verifyingContract: await this.deployment.subscriptionManager.getAddress()
        };

        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É Plan
        const planForSigning = {
            chainIds: contractPlan.chainIds,
            price: contractPlan.price,
            period: contractPlan.period,
            token: contractPlan.token,
            merchant: contractPlan.merchant,
            salt: contractPlan.salt,
            expiry: contractPlan.expiry
        };

        const types = {
            Plan: [
                { name: "chainIds", type: "uint256[]" }, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø uint256[]
                { name: "price", type: "uint256" },
                { name: "period", type: "uint256" },
                { name: "token", type: "address" },
                { name: "merchant", type: "address" },
                { name: "salt", type: "uint256" },
                { name: "expiry", type: "uint64" }
            ]
        };

        const signature = await merchant.signTypedData(domain, types, planForSigning);

        console.log(`‚úÖ –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω`);
        console.log(`  üí∞ –¶–µ–Ω–∞: ${ethers.formatEther(plan.price)} ${plan.tokenAddress === ethers.ZeroAddress ? 'ETH' : 'TOKENS'}`);
        console.log(`  ‚è±Ô∏è –ü–µ—Ä–∏–æ–¥: ${plan.duration} —Å–µ–∫—É–Ω–¥`);
        console.log(`  üîó –°–µ—Ç—å: ${network.chainId}`);
        console.log(`  ‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${new Date(contractPlan.expiry * 1000).toLocaleString()}`);

        return { contractPlan, signature };
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–æ –∏ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    protected async analyzeBalances(
        addresses: string[],
        tokenAddress: string,
        operation: string
    ): Promise<void> {
        console.log(`\nüí∞ –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–æ–≤ ${operation}:`);

        for (const address of addresses) {
            let balance: bigint;
            let symbol: string;

            if (tokenAddress === ethers.ZeroAddress) {
                balance = await ethers.provider.getBalance(address);
                symbol = "ETH";
            } else {
                const token = await ethers.getContractAt("IERC20", tokenAddress);
                balance = await token.balanceOf(address);
                symbol = "TOKENS";
            }

            console.log(`  ${address}: ${ethers.formatEther(balance)} ${symbol}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ –∞–¥—Ä–µ—Å—É –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
     */
    protected async getSubscriptionInfo(subscriberAddress: string): Promise<any> {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–µ
            const subscriber = await this.deployment.subscriptionManager.subscribers(subscriberAddress);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            if (subscriber.planHash === "0x0000000000000000000000000000000000000000000000000000000000000000") {
                return {
                    subscriber: subscriberAddress,
                    merchant: "",
                    token: "",
                    amount: 0n,
                    period: 0,
                    nextPayment: 0n,
                    nextBilling: 0n,
                    planHash: "0x0000000000000000000000000000000000000000000000000000000000000000",
                    isActive: false
                };
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
            const plan = await this.deployment.subscriptionManager.plans(subscriber.planHash);

            return {
                subscriber: subscriberAddress,
                merchant: plan.merchant,
                token: plan.token,
                amount: plan.price,
                period: plan.period,
                nextPayment: subscriber.nextBilling,
                nextBilling: subscriber.nextBilling,
                planHash: subscriber.planHash,
                isActive: subscriber.planHash !== "0x0000000000000000000000000000000000000000000000000000000000000000"
            };
        } catch (error) {
            console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ: ${error}`);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–º–µ—Å—Ç–æ null
            return {
                subscriber: subscriberAddress,
                merchant: "",
                token: "",
                amount: 0n,
                period: 0,
                nextPayment: 0n,
                nextBilling: 0n,
                planHash: "0x0000000000000000000000000000000000000000000000000000000000000000",
                isActive: false
            };
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
     */
    protected createResult(name: string, success: boolean, error?: string, details?: any): ScenarioResult {
        return {
            name,
            success,
            error,
            details
        };
    }
}
