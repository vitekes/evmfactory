/**
 * –°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ ETH
 * 
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ø–ª–∞–Ω –≤ –Ω–∞—Ç–∏–≤–Ω–æ–π –≤–∞–ª—é—Ç–µ (ETH):
 * 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ ETH
 * 2. –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–ª–∞–Ω
 * 3. –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–æ–≤ –∏ –∫–æ–º–∏—Å—Å–∏–π
 * 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
 */

import { ethers } from "hardhat";
import { Signer } from "ethers";
import { BaseScenario, ScenarioResult, ScenarioConfig, SubscriptionPlan } from "./base-scenario";

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ ETH
 */
export class EthSubscriptionScenario extends BaseScenario {
    constructor(config: ScenarioConfig) {
        super(config);
    }

    async execute(): Promise<ScenarioResult> {
        console.log("\nüéØ –°–¶–ï–ù–ê–†–ò–ô: –ü–æ–¥–ø–∏—Å–∫–∞ –≤ ETH");
        console.log("=".repeat(50));

        try {
            const { merchant, subscriber } = await this.getSigners();

            // –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
            const addresses = [
                await merchant.getAddress(),
                await subscriber.getAddress(),
                await this.deployment.gateway.getAddress()
            ];
            await this.analyzeBalances(addresses, ethers.ZeroAddress, "–¥–æ –ø–æ–¥–ø–∏—Å–∫–∏");

            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –≤ ETH
            const plan: SubscriptionPlan = {
                id: "eth-monthly",
                name: "–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –≤ ETH",
                price: ethers.parseEther("0.01"), // 0.01 ETH
                duration: 30 * 24 * 60 * 60, // 30 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                tokenAddress: ethers.ZeroAddress, // ETH
                merchant: await merchant.getAddress()
            };

            console.log("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ ETH...");
            const { contractPlan, signature } = await this.createSubscriptionPlan(merchant, plan);

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–ª–∞–Ω
            console.log("\n‚úçÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–ª–∞–Ω...");
            const subscriptionTx = await this.deployment.subscriptionManager
                .connect(subscriber)
                .subscribe(contractPlan, signature, "0x", { value: plan.price });

            const subscriptionReceipt = await subscriptionTx.wait();
            console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –≥–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω:", subscriptionReceipt.gasUsed.toString());

            // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ —Å–æ–±—ã—Ç–∏—è
            const subscriptionEvent = subscriptionReceipt.logs.find((log: any) => {
                try {
                    const parsed = this.deployment.subscriptionManager.interface.parseLog(log);
                    return parsed?.name === "SubscriptionCreated";
                } catch {
                    return false;
                }
            });

            if (!subscriptionEvent) {
                throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ SubscriptionCreated");
            }

            const parsedSubscriptionEvent = this.deployment.subscriptionManager.interface.parseLog(subscriptionEvent);
            const subscriptionId = parsedSubscriptionEvent.args.subscriptionId;

            console.log("üìã ID –ø–æ–¥–ø–∏—Å–∫–∏:", subscriptionId);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
            console.log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ...");
            const subscriptionInfo = await this.getSubscriptionInfo(await subscriber.getAddress());

            if (subscriptionInfo) {
                console.log("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:");
                console.log("  –ü–æ–¥–ø–∏—Å—á–∏–∫:", subscriptionInfo.subscriber);
                console.log("  –ú–µ—Ä—á–∞–Ω—Ç:", subscriptionInfo.merchant);
                console.log("  –¢–æ–∫–µ–Ω:", subscriptionInfo.token === ethers.ZeroAddress ? "ETH" : subscriptionInfo.token);
                console.log("  –°—É–º–º–∞:", ethers.formatEther(subscriptionInfo.amount), "ETH");
                console.log("  –ü–µ—Ä–∏–æ–¥:", subscriptionInfo.period, "—Å–µ–∫—É–Ω–¥");
                console.log("  –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂:", new Date(Number(subscriptionInfo.nextPayment) * 1000).toLocaleString());
                console.log("  –ê–∫—Ç–∏–≤–Ω–∞:", subscriptionInfo.isActive ? "–î–∞" : "–ù–µ—Ç");
            }

            // –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            await this.analyzeBalances(addresses, ethers.ZeroAddress, "–ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
            const isActive = subscriptionInfo?.isActive;
            if (!isActive) {
                throw new Error("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è");
            }

            console.log("\nüéâ –°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ ETH –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!");

            return this.createResult(
                "–ü–æ–¥–ø–∏—Å–∫–∞ –≤ ETH",
                true,
                undefined,
                {
                    subscriptionId,
                    planPrice: ethers.formatEther(plan.price),
                    currency: "ETH",
                    duration: plan.duration,
                    merchant: await merchant.getAddress(),
                    subscriber: await subscriber.getAddress(),
                    gasUsed: subscriptionReceipt.gasUsed.toString()
                }
            );

        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : String(error);
            console.log("\n‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ ETH:", errorMessage);

            return this.createResult(
                "–ü–æ–¥–ø–∏—Å–∫–∞ –≤ ETH",
                false,
                errorMessage
            );
        }
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */
export async function testEthSubscription(
    deployment: any,
    merchant?: Signer,
    subscriber?: Signer
): Promise<ScenarioResult> {
    const scenario = new EthSubscriptionScenario({
        deployment,
        merchant,
        subscriber
    });

    return await scenario.execute();
}
