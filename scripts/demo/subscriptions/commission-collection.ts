/**
 * –°—Ü–µ–Ω–∞—Ä–∏–π —Å–±–æ—Ä–∞ –∫–æ–º–∏—Å—Å–∏–∏ (Commission Collection)
 * 
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º —Å–±–æ—Ä–∞ –∫–æ–º–∏—Å—Å–∏–π —á–µ—Ä–µ–∑ FeeProcessor
 * –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
 * —Å—Ä–µ–¥—Å—Ç–≤ –º–µ–∂–¥—É –º–µ—Ä—á–∞–Ω—Ç–æ–º –∏ —Å–∏—Å—Ç–µ–º–æ–π –∫–æ–º–∏—Å—Å–∏–π.
 */

import { ethers } from "hardhat";
import { Signer } from "ethers";
import { BaseScenario, ScenarioResult, ScenarioConfig, SubscriptionDeployment } from './base-scenario';

export class CommissionCollectionScenario extends BaseScenario {
    constructor(config: ScenarioConfig) {
        super(config);
    }

    async execute(): Promise<ScenarioResult> {
        try {
            console.log("\nüí∞ –°–¶–ï–ù–ê–†–ò–ô –°–ë–û–†–ê –ö–û–ú–ò–°–°–ò–ò");
            console.log("=".repeat(50));

            const { merchant, subscriber } = await this.getSigners();
            const [deployer] = await ethers.getSigners();

            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Ü–µ–Ω–æ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∏—Å—Å–∏–π
            const plan = await this.createSubscriptionPlan(merchant, {
                id: "commission-test-plan",
                name: "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è —Å–±–æ—Ä–∞ –∫–æ–º–∏—Å—Å–∏–∏",
                price: ethers.parseEther("1.0"), // 1.0 ETH –¥–ª—è –ª—É—á—à–µ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∏—Å—Å–∏–π
                duration: 86400, // 1 –¥–µ–Ω—å
                tokenAddress: ethers.ZeroAddress, // ETH
                merchant: await merchant.getAddress()
            });

            console.log("üìã –ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ–∑–¥–∞–Ω:");
            console.log("  üí∞ –¶–µ–Ω–∞:", ethers.formatEther(plan.contractPlan.price), "ETH");
            console.log("  ‚è∞ –ü–µ—Ä–∏–æ–¥:", plan.contractPlan.period, "—Å–µ–∫—É–Ω–¥");
            console.log("  üè™ –ú–µ—Ä—á–∞–Ω—Ç:", plan.contractPlan.merchant);

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –≤ FeeProcessor
            console.log("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∏—Å—Å–∏–π –≤ FeeProcessor...");

            // –ü–æ–ª—É—á–∞–µ–º orchestrator –∏ ProcessorRegistry
            const orchestratorAddress = await this.deployment.gateway.orchestrator();
            const orchestrator = await ethers.getContractAt("PaymentOrchestrator", orchestratorAddress);

            // –ü–æ–ª—É—á–∞–µ–º ProcessorRegistry
            const processorRegistryAddress = await orchestrator.processorRegistry();
            const processorRegistry = await ethers.getContractAt("ProcessorRegistry", processorRegistryAddress);

            // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å FeeProcessor
            const feeProcessorAddress = await processorRegistry.getProcessorByName("FeeProcessor");
            const feeProcessor = await ethers.getContractAt("FeeProcessor", feeProcessorAddress);

            console.log("  üìç FeeProcessor –∞–¥—Ä–µ—Å:", feeProcessorAddress);

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é 5% (500 basis points)
            const feeRate = 500; // 5%
            const feeRecipient = await deployer.getAddress(); // –î–µ–ø–ª–æ–µ—Ä –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∫–æ–º–∏—Å—Å–∏–π

            console.log("  üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏:", feeRate / 100, "%");
            console.log("  üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å –∫–æ–º–∏—Å—Å–∏–π:", feeRecipient);

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º FeeProcessor –¥–ª—è –º–æ–¥—É–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
            // FeeProcessor –æ–∂–∏–¥–∞–µ—Ç —Ä–æ–≤–Ω–æ 2 –±–∞–π—Ç–∞ –¥–ª—è uint16 fee rate
            const feeConfigData = new Uint8Array(2);
            feeConfigData[0] = (feeRate >> 8) & 0xFF; // —Å—Ç–∞—Ä—à–∏–π –±–∞–π—Ç
            feeConfigData[1] = feeRate & 0xFF; // –º–ª–∞–¥—à–∏–π –±–∞–π—Ç

            await orchestrator.configureProcessor(
                this.deployment.moduleId,
                "FeeProcessor",
                true,
                feeConfigData
            );
            console.log("‚úÖ FeeProcessor –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –∫–æ–º–∏—Å—Å–∏–µ–π", feeRate / 100, "%");

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã –¥–æ –ø–æ–¥–ø–∏—Å–∫–∏ (–≤–∫–ª—é—á–∞—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∫–æ–º–∏—Å—Å–∏–π)
            const addresses = [
                await merchant.getAddress(),
                await subscriber.getAddress(),
                feeRecipient
            ];

            const addressLabels = ["–ú–µ—Ä—á–∞–Ω—Ç", "–ü–æ–¥–ø–∏—Å—á–∏–∫", "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –∫–æ–º–∏—Å—Å–∏–π"];

            await this.analyzeBalancesWithLabels(addresses, addressLabels, ethers.ZeroAddress, "–î–æ –ø–æ–¥–ø–∏—Å–∫–∏");

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–ª–∞–Ω
            console.log("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∫–æ–º–∏—Å—Å–∏–µ–π...");
            const subscribeValue = plan.contractPlan.price + ethers.parseEther("0.1"); // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π –∏ –≥–∞–∑–∞

            const subscribeTx = await this.deployment.subscriptionManager
                .connect(subscriber)
                .subscribe(plan.contractPlan, plan.signature, "0x", {
                    value: subscribeValue
                });

            const subscribeReceipt = await subscribeTx.wait();
            console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –≥–∞–∑:", subscribeReceipt.gasUsed.toString());

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
            console.log("\nüìã –ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:");
            const subscriptionEvents = subscribeReceipt.logs.filter((log: any) => {
                try {
                    const parsed = this.deployment.subscriptionManager.interface.parseLog(log);
                    return parsed?.name === "SubscriptionCreated";
                } catch {
                    return false;
                }
            });

            subscriptionEvents.forEach((event: any) => {
                const parsed = this.deployment.subscriptionManager.interface.parseLog(event);
                console.log("  üìã SubscriptionCreated:");
                console.log("    üìã Subscription ID:", parsed.args.subscriptionId.toString());
                console.log("    üë§ –í–ª–∞–¥–µ–ª–µ—Ü:", parsed.args.owner);
                console.log("    üìã Plan ID:", parsed.args.planId);
            });

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏
            await this.analyzeBalancesWithLabels(addresses, addressLabels, ethers.ZeroAddress, "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏");

            // –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ —Å—É–º–º—ã
            const expectedFee = plan.contractPlan.price ? (plan.contractPlan.price * BigInt(feeRate)) / BigInt(10000) : 0n;
            const expectedMerchantAmount = plan.contractPlan.price ? plan.contractPlan.price - expectedFee : 0n;

            console.log("\nüí∞ –û–∂–∏–¥–∞–µ–º–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤:");
            console.log("  üíµ –û–±—â–∞—è —Å—É–º–º–∞:", plan.contractPlan.price ? ethers.formatEther(plan.contractPlan.price) : "0", "ETH");
            console.log("  üí∞ –ö–æ–º–∏—Å—Å–∏—è (5%):", expectedFee ? ethers.formatEther(expectedFee) : "0", "ETH");
            console.log("  üè™ –ú–µ—Ä—á–∞–Ω—Ç—É:", expectedMerchantAmount ? ethers.formatEther(expectedMerchantAmount) : "0", "ETH");

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–æ–ª—å AUTOMATION_ROLE –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            console.log("\nüîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–∏ AUTOMATION_ROLE –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è...");
            const automationRole = ethers.keccak256(ethers.toUtf8Bytes("AUTOMATION_ROLE"));

            const hasAutomationRole = await this.deployment.core.hasRole(automationRole, await deployer.getAddress());
            if (!hasAutomationRole) {
                await this.deployment.core.grantRole(automationRole, await deployer.getAddress());
                console.log("‚úÖ –†–æ–ª—å AUTOMATION_ROLE –≤—ã–¥–∞–Ω–∞ –¥–µ–ø–ª–æ–µ—Ä—É");
            }

            // –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            console.log("\nüí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è...");
            const topUpTx = await deployer.sendTransaction({
                to: await subscriber.getAddress(),
                value: ethers.parseEther("2.0")
            });
            await topUpTx.wait();
            console.log("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω");

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º
            await this.analyzeBalancesWithLabels(addresses, addressLabels, ethers.ZeroAddress, "–ü–µ—Ä–µ–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º");

            // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ charge() (–æ–±—ã—á–Ω–æ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            console.log("\nüîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å –∫–æ–º–∏—Å—Å–∏–µ–π...");

            // –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è
            // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º—ã –º–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å
            try {
                const chargeTx = await this.deployment.subscriptionManager
                    .connect(deployer)
                    .charge(await subscriber.getAddress());

                const chargeReceipt = await chargeTx.wait();
                console.log("‚úÖ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –≥–∞–∑:", chargeReceipt.gasUsed.toString());

                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
                const renewalEvents = chargeReceipt.logs.filter((log: any) => {
                    try {
                        const parsed = this.deployment.subscriptionManager.interface.parseLog(log);
                        return parsed?.name === "SubscriptionCharged";
                    } catch {
                        return false;
                    }
                });

                renewalEvents.forEach((event: any) => {
                    const parsed = this.deployment.subscriptionManager.interface.parseLog(event);
                    console.log("  üí∞ SubscriptionCharged:");
                    console.log("    üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", parsed.args.user);
                    console.log("    üíµ –°—É–º–º–∞:", parsed.args.amount ? ethers.formatEther(parsed.args.amount) : "0", "ETH");
                });

                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
                await this.analyzeBalancesWithLabels(addresses, addressLabels, ethers.ZeroAddress, "–ü–æ—Å–ª–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è");

            } catch (error: any) {
                console.log("‚ö†Ô∏è –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –µ—â–µ –Ω–µ –≤—Ä–µ–º—è):", error.message);
                console.log("   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é");
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
            const subscriptionInfo = await this.getSubscriptionInfo(await subscriber.getAddress());
            console.log("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:");
            console.log("  üìã Plan Hash:", subscriptionInfo.planHash);
            console.log("  ‚è∞ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ:", new Date(Number(subscriptionInfo.nextBilling) * 1000).toLocaleString());

            // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π
            console.log("\nüì¶ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –∫–æ–º–∏—Å—Å–∏–π...");

            // –°–æ–∑–¥–∞–µ–º –µ—â–µ –æ–¥–Ω–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            const [, , , subscriber2] = await ethers.getSigners();

            // –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
            const topUp2Tx = await deployer.sendTransaction({
                to: await subscriber2.getAddress(),
                value: ethers.parseEther("2.0")
            });
            await topUp2Tx.wait();

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const subscribe2Tx = await this.deployment.subscriptionManager
                .connect(subscriber2)
                .subscribe(plan.contractPlan, plan.signature, "0x", {
                    value: subscribeValue
                });

            await subscribe2Tx.wait();
            console.log("‚úÖ –í—Ç–æ—Ä–æ–π –ø–æ–¥–ø–∏—Å—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω");

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            const extendedAddresses = [
                ...addresses,
                await subscriber2.getAddress()
            ];
            const extendedLabels = [
                ...addressLabels,
                "–ü–æ–¥–ø–∏—Å—á–∏–∫ 2"
            ];

            await this.analyzeBalancesWithLabels(extendedAddresses, extendedLabels, ethers.ZeroAddress, "–ü–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–π –ø–æ–¥–ø–∏—Å–∫–∏");

            return this.createResult(
                "–°–±–æ—Ä –∫–æ–º–∏—Å—Å–∏–∏",
                true,
                null,
                {
                    planPrice: plan.contractPlan.price ? ethers.formatEther(plan.contractPlan.price) : "0",
                    currency: "ETH",
                    merchant: await merchant.getAddress(),
                    subscriber: await subscriber.getAddress(),
                    feeRate: feeRate / 100,
                    feeRecipient: feeRecipient,
                    expectedFee: expectedFee ? ethers.formatEther(expectedFee) : "0",
                    expectedMerchantAmount: expectedMerchantAmount ? ethers.formatEther(expectedMerchantAmount) : "0",
                    gasUsed: subscribeReceipt.gasUsed.toString(),
                    subscriptionId: subscriptionInfo.planHash
                }
            );

        } catch (error: any) {
            console.log("‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å–±–æ—Ä–∞ –∫–æ–º–∏—Å—Å–∏–∏:", error.message);
            return this.createResult("–°–±–æ—Ä –∫–æ–º–∏—Å—Å–∏–∏", false, error.message);
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–æ–≤ —Å –º–µ—Ç–∫–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
     */
    private async analyzeBalancesWithLabels(
        addresses: string[],
        labels: string[],
        tokenAddress: string,
        operation: string
    ): Promise<void> {
        console.log(`\nüí∞ –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–æ–≤ (${operation}):`);

        for (let i = 0; i < addresses.length; i++) {
            const address = addresses[i];
            const label = labels[i] || `–ê–¥—Ä–µ—Å ${i + 1}`;

            if (tokenAddress === ethers.ZeroAddress) {
                const balance = await ethers.provider.getBalance(address);
                console.log(`  ${label}: ${ethers.formatEther(balance)} ETH`);
            } else {
                const token = await ethers.getContractAt("IERC20", tokenAddress);
                const balance = await token.balanceOf(address);
                console.log(`  ${label}: ${ethers.formatUnits(balance, 18)} —Ç–æ–∫–µ–Ω–æ–≤`);
            }
        }
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */
export async function testCommissionCollection(
    deployment: SubscriptionDeployment,
    merchant: Signer,
    subscriber: Signer
): Promise<ScenarioResult> {
    const scenario = new CommissionCollectionScenario({
        deployment,
        merchant,
        subscriber
    });

    return await scenario.execute();
}
