/**
 * –°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ —Å–∫–∏–¥–∫–æ–π (Discount Subscription)
 * 
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫:
 * 1. –°–∫–∏–¥–∫–∞ —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–π —Ü–µ–Ω–æ–π
 * 2. –°–∫–∏–¥–∫–∞ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω —Å –ª—É—á—à–∏–º –∫—É—Ä—Å–æ–º
 * 3. –ü—Ä–æ–º–æ-–∫–æ–¥—ã –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∫–∏–¥–∫–∏
 */

import { ethers } from "hardhat";
import { Signer } from "ethers";
import { BaseScenario, ScenarioResult, ScenarioConfig, SubscriptionDeployment } from './base-scenario';

export class DiscountSubscriptionScenario extends BaseScenario {
    constructor(config: ScenarioConfig) {
        super(config);
    }

    async execute(): Promise<ScenarioResult> {
        try {
            console.log("\nüéØ –°–¶–ï–ù–ê–†–ò–ô –ü–û–î–ü–ò–°–ö–ò –°–û –°–ö–ò–î–ö–û–ô");
            console.log("=".repeat(50));

            const { merchant, subscriber } = await this.getSigners();
            const [deployer] = await ethers.getSigners();

            // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 1: –û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞ vs –°–∫–∏–¥–æ—á–Ω–∞—è —Ü–µ–Ω–∞
            console.log("\nüìä –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø 1: –ü–†–Ø–ú–ê–Ø –°–ö–ò–î–ö–ê –ù–ê –ü–õ–ê–ù");
            console.log("-".repeat(40));

            // –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø–ª–∞–Ω
            const regularPlan = await this.createSubscriptionPlan(merchant, {
                id: "regular-plan",
                name: "–û–±—ã—á–Ω—ã–π –ø–ª–∞–Ω",
                price: ethers.parseEther("1.0"), // 1.0 ETH - –æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞
                duration: 86400, // 1 –¥–µ–Ω—å
                tokenAddress: ethers.ZeroAddress, // ETH
                merchant: await merchant.getAddress()
            });

            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω —Å–æ —Å–∫–∏–¥–∫–æ–π 30%
            const discountedPrice = (regularPlan.contractPlan.price * BigInt(70)) / BigInt(100); // 30% —Å–∫–∏–¥–∫–∞
            const discountPlan = await this.createSubscriptionPlan(merchant, {
                id: "discount-plan-30",
                name: "–ü–ª–∞–Ω —Å–æ —Å–∫–∏–¥–∫–æ–π 30%",
                price: discountedPrice,
                duration: 86400, // 1 –¥–µ–Ω—å
                tokenAddress: ethers.ZeroAddress, // ETH
                merchant: await merchant.getAddress()
            });

            console.log("üí∞ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω:");
            console.log("  üìà –û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞:", ethers.formatEther(regularPlan.contractPlan.price), "ETH");
            console.log("  üéØ –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π:", ethers.formatEther(discountPlan.contractPlan.price), "ETH");
            console.log("  üí∏ –≠–∫–æ–Ω–æ–º–∏—è:", ethers.formatEther(regularPlan.contractPlan.price - discountPlan.contractPlan.price), "ETH");
            console.log("  üìä –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: 30%");

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã –¥–æ –ø–æ–¥–ø–∏—Å–∫–∏
            const addresses = [
                await merchant.getAddress(),
                await subscriber.getAddress()
            ];

            await this.analyzeBalances(addresses, ethers.ZeroAddress, "–î–æ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ —Å–∫–∏–¥–∫–æ–π");

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–ª–∞–Ω —Å–æ —Å–∫–∏–¥–∫–æ–π
            console.log("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ —Å–∫–∏–¥–∫–æ–π...");
            const subscribeValue = discountPlan.contractPlan.price + ethers.parseEther("0.05"); // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π

            const subscribeTx = await this.deployment.subscriptionManager
                .connect(subscriber)
                .subscribe(discountPlan.contractPlan, discountPlan.signature, "0x", {
                    value: subscribeValue
                });

            const subscribeReceipt = await subscribeTx.wait();
            console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π —Å–æ–∑–¥–∞–Ω–∞, –≥–∞–∑:", subscribeReceipt.gasUsed.toString());

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏
            await this.analyzeBalances(addresses, ethers.ZeroAddress, "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ —Å–∫–∏–¥–∫–æ–π");

            // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 2: –°–∫–∏–¥–∫–∞ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω
            console.log("\nüìä –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø 2: –°–ö–ò–î–ö–ê –ß–ï–†–ï–ó –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –¢–û–ö–ï–ù");
            console.log("-".repeat(40));

            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –≤ —Ç–æ–∫–µ–Ω–∞—Ö —Å "–≤—ã–≥–æ–¥–Ω—ã–º" –∫—É—Ä—Å–æ–º
            const tokenPlan = await this.createSubscriptionPlan(merchant, {
                id: "token-plan",
                name: "–ü–ª–∞–Ω –≤ —Ç–æ–∫–µ–Ω–∞—Ö",
                price: ethers.parseUnits("1000", 18), // 1000 —Ç–æ–∫–µ–Ω–æ–≤
                duration: 86400, // 1 –¥–µ–Ω—å
                tokenAddress: await this.deployment.testToken.getAddress(),
                merchant: await merchant.getAddress()
            });

            console.log("ü™ô –ü–ª–∞–Ω –≤ —Ç–æ–∫–µ–Ω–∞—Ö:");
            console.log("  üí∞ –¶–µ–Ω–∞:", ethers.formatUnits(tokenPlan.contractPlan.price, 18), "—Ç–æ–∫–µ–Ω–æ–≤");
            console.log("  üè™ –ú–µ—Ä—á–∞–Ω—Ç:", tokenPlan.contractPlan.merchant);

            // –í—ã–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ–¥–ø–∏—Å—á–∏–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            console.log("\nüí∞ –í—ã–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫—É...");
            const tokenAmount = ethers.parseUnits("2000", 18); // 2000 —Ç–æ–∫–µ–Ω–æ–≤
            await this.deployment.testToken.transfer(await subscriber.getAddress(), tokenAmount);
            console.log("‚úÖ –í—ã–¥–∞–Ω–æ", ethers.formatUnits(tokenAmount, 18), "—Ç–æ–∫–µ–Ω–æ–≤");

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã —Ç–æ–∫–µ–Ω–æ–≤
            await this.analyzeBalances(addresses, await this.deployment.testToken.getAddress(), "–î–æ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ç–æ–∫–µ–Ω–∞—Ö");

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–ª–∞–Ω –≤ —Ç–æ–∫–µ–Ω–∞—Ö
            console.log("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ç–æ–∫–µ–Ω–∞—Ö...");

            // –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –¥–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–∞—Ç—É —Ç–æ–∫–µ–Ω–æ–≤
            const approveTx = await this.deployment.testToken
                .connect(subscriber)
                .approve(await this.deployment.gateway.getAddress(), tokenPlan.contractPlan.price);
            await approveTx.wait();
            console.log("‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–∞—Ç—É —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã–¥–∞–Ω–æ");

            const tokenSubscribeTx = await this.deployment.subscriptionManager
                .connect(subscriber)
                .subscribe(tokenPlan.contractPlan, tokenPlan.signature, "0x");

            const tokenSubscribeReceipt = await tokenSubscribeTx.wait();
            console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≤ —Ç–æ–∫–µ–Ω–∞—Ö —Å–æ–∑–¥–∞–Ω–∞, –≥–∞–∑:", tokenSubscribeReceipt.gasUsed.toString());

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏
            await this.analyzeBalances(addresses, await this.deployment.testToken.getAddress(), "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ç–æ–∫–µ–Ω–∞—Ö");

            // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 3: –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Å—Ä–æ–∫–æ–º
            console.log("\nüìä –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø 3: –í–†–ï–ú–ï–ù–ù–ê–Ø –°–ö–ò–î–ö–ê");
            console.log("-".repeat(40));

            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–∫–∏–¥–∫–æ–π (—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ 1 —á–∞—Å)
            const currentTime = Math.floor(Date.now() / 1000);
            const expiryTime = currentTime + 3600; // –î–µ–π—Å—Ç–≤—É–µ—Ç 1 —á–∞—Å

            const tempDiscountPrice = (regularPlan.contractPlan.price * BigInt(50)) / BigInt(100); // 50% —Å–∫–∏–¥–∫–∞
            const tempDiscountPlan = await this.createSubscriptionPlan(merchant, {
                id: "temp-discount-plan",
                name: "–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞ 50%",
                price: tempDiscountPrice,
                duration: 86400, // 1 –¥–µ–Ω—å
                tokenAddress: ethers.ZeroAddress, // ETH
                merchant: await merchant.getAddress()
            });

            console.log("‚è∞ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞:");
            console.log("  üìà –û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞:", ethers.formatEther(regularPlan.contractPlan.price), "ETH");
            console.log("  üéØ –¶–µ–Ω–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–∫–∏–¥–∫–æ–π:", ethers.formatEther(tempDiscountPlan.contractPlan.price), "ETH");
            console.log("  üí∏ –≠–∫–æ–Ω–æ–º–∏—è:", ethers.formatEther(regularPlan.contractPlan.price - tempDiscountPlan.contractPlan.price), "ETH");
            console.log("  üìä –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: 50%");
            console.log("  ‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:", new Date(expiryTime * 1000).toLocaleString());

            // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–∫–∏–¥–∫–∏
            const [, , , subscriber2] = await ethers.getSigners();

            // –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
            const topUpTx = await deployer.sendTransaction({
                to: await subscriber2.getAddress(),
                value: ethers.parseEther("2.0")
            });
            await topUpTx.wait();

            const addresses2 = [
                await merchant.getAddress(),
                await subscriber2.getAddress()
            ];

            await this.analyzeBalances(addresses2, ethers.ZeroAddress, "–î–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–∫–∏–¥–∫–∏");

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–ª–∞–Ω —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–∫–∏–¥–∫–æ–π
            console.log("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–∫–∏–¥–∫–æ–π...");
            const tempSubscribeValue = tempDiscountPlan.contractPlan.price + ethers.parseEther("0.05");

            const tempSubscribeTx = await this.deployment.subscriptionManager
                .connect(subscriber2)
                .subscribe(tempDiscountPlan.contractPlan, tempDiscountPlan.signature, "0x", {
                    value: tempSubscribeValue
                });

            const tempSubscribeReceipt = await tempSubscribeTx.wait();
            console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–∫–∏–¥–∫–æ–π —Å–æ–∑–¥–∞–Ω–∞, –≥–∞–∑:", tempSubscribeReceipt.gasUsed.toString());

            await this.analyzeBalances(addresses2, ethers.ZeroAddress, "–ü–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–∫–∏–¥–∫–∏");

            // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 4: –ü–∞–∫–µ—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–æ–∫)
            console.log("\nüìä –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø 4: –ü–ê–ö–ï–¢–ù–ê–Ø –°–ö–ò–î–ö–ê");
            console.log("-".repeat(40));

            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω —Å –ø–∞–∫–µ—Ç–Ω–æ–π —Å–∫–∏–¥–∫–æ–π (—á–µ–º –±–æ–ª—å—à–µ –ø–æ–¥–ø–∏—Å–æ–∫, —Ç–µ–º –±–æ–ª—å—à–µ —Å–∫–∏–¥–∫–∞)
            const batchDiscountPrice = (regularPlan.contractPlan.price * BigInt(80)) / BigInt(100); // 20% —Å–∫–∏–¥–∫–∞
            const batchDiscountPlan = await this.createSubscriptionPlan(merchant, {
                id: "batch-discount-plan",
                name: "–ü–∞–∫–µ—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞ 20%",
                price: batchDiscountPrice,
                duration: 86400, // 1 –¥–µ–Ω—å
                tokenAddress: ethers.ZeroAddress, // ETH
                merchant: await merchant.getAddress()
            });

            console.log("üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞:");
            console.log("  üìà –û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞:", ethers.formatEther(regularPlan.contractPlan.price), "ETH");
            console.log("  üéØ –¶–µ–Ω–∞ —Å –ø–∞–∫–µ—Ç–Ω–æ–π —Å–∫–∏–¥–∫–æ–π:", ethers.formatEther(batchDiscountPlan.contractPlan.price), "ETH");
            console.log("  üí∏ –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–µ:", ethers.formatEther(regularPlan.contractPlan.price - batchDiscountPlan.contractPlan.price), "ETH");
            console.log("  üìä –†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: 20%");

            // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
            const [, , , , subscriber3] = await ethers.getSigners();

            // –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
            const topUp3Tx = await deployer.sendTransaction({
                to: await subscriber3.getAddress(),
                value: ethers.parseEther("2.0")
            });
            await topUp3Tx.wait();

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–∞–∫–µ—Ç–Ω—É—é —Å–∫–∏–¥–∫—É
            const batchSubscribeValue = batchDiscountPlan.contractPlan.price + ethers.parseEther("0.05");

            const batchSubscribeTx = await this.deployment.subscriptionManager
                .connect(subscriber3)
                .subscribe(batchDiscountPlan.contractPlan, batchDiscountPlan.signature, "0x", {
                    value: batchSubscribeValue
                });

            await batchSubscribeTx.wait();
            console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å –ø–∞–∫–µ—Ç–Ω–æ–π —Å–∫–∏–¥–∫–æ–π —Å–æ–∑–¥–∞–Ω–∞");

            // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Å–∫–∏–¥–∫–∞–º
            console.log("\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–ö–ò–î–ö–ê–ú:");
            console.log("=".repeat(50));

            const totalRegularPrice = regularPlan.contractPlan.price * BigInt(4); // 4 –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –æ–±—ã—á–Ω–æ–π —Ü–µ–Ω–µ
            const totalDiscountedPrice = discountPlan.contractPlan.price + tokenPlan.contractPlan.price + tempDiscountPlan.contractPlan.price + batchDiscountPlan.contractPlan.price;
            const totalSavings = totalRegularPrice - totalDiscountedPrice;

            console.log("üí∞ –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è:");
            console.log("  üìà –û–±—ã—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å 4 –ø–æ–¥–ø–∏—Å–æ–∫:", ethers.formatEther(totalRegularPrice), "ETH");
            console.log("  üéØ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ —Å–∫–∏–¥–∫–∞–º–∏:", ethers.formatEther(totalDiscountedPrice), "ETH");
            console.log("  üí∏ –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è:", ethers.formatEther(totalSavings), "ETH");
            console.log("  üìä –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏:", Math.round(Number((totalSavings * BigInt(100)) / totalRegularPrice)), "%");

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö
            const subscriptionInfo1 = await this.getSubscriptionInfo(await subscriber.getAddress());
            const subscriptionInfo2 = await this.getSubscriptionInfo(await subscriber2.getAddress());
            const subscriptionInfo3 = await this.getSubscriptionInfo(await subscriber3.getAddress());

            return this.createResult(
                "–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π",
                true,
                null,
                {
                    regularPrice: ethers.formatEther(regularPlan.contractPlan.price),
                    discountedPrice: ethers.formatEther(discountPlan.contractPlan.price),
                    tempDiscountPrice: ethers.formatEther(tempDiscountPlan.contractPlan.price),
                    batchDiscountPrice: ethers.formatEther(batchDiscountPlan.contractPlan.price),
                    currency: "ETH",
                    merchant: await merchant.getAddress(),
                    subscriber: await subscriber.getAddress(),
                    totalSavings: ethers.formatEther(totalSavings),
                    averageDiscount: Math.round(Number((totalSavings * BigInt(100)) / totalRegularPrice)),
                    gasUsed: subscribeReceipt.gasUsed.toString(),
                    subscriptionIds: [
                        subscriptionInfo1.planHash,
                        subscriptionInfo2.planHash,
                        subscriptionInfo3.planHash
                    ]
                }
            );

        } catch (error: any) {
            console.log("‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ —Å–∫–∏–¥–∫–æ–π:", error.message);
            return this.createResult("–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π", false, error.message);
        }
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */
export async function testDiscountSubscription(
    deployment: SubscriptionDeployment,
    merchant: Signer,
    subscriber: Signer
): Promise<ScenarioResult> {
    const scenario = new DiscountSubscriptionScenario({
        deployment,
        merchant,
        subscriber
    });

    return await scenario.execute();
}
