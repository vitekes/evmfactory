/**
 * –°—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (Renewal)
 * 
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ charge()
 * –í–∫–ª—é—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
 */

import { ethers } from "hardhat";
import { Signer } from "ethers";
import { BaseScenario, ScenarioResult, ScenarioConfig, SubscriptionDeployment } from './base-scenario';

export class SubscriptionRenewalScenario extends BaseScenario {
    constructor(config: ScenarioConfig) {
        super(config);
    }

    async execute(): Promise<ScenarioResult> {
        try {
            console.log("\nüîÑ –°–¶–ï–ù–ê–†–ò–ô –ü–†–û–î–õ–ï–ù–ò–Ø –ü–û–î–ü–ò–°–ö–ò");
            console.log("=".repeat(50));

            const { merchant, subscriber } = await this.getSigners();
            const [deployer] = await ethers.getSigners();

            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            const plan = await this.createSubscriptionPlan(merchant, {
                id: "renewal-test-plan",
                name: "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è",
                price: ethers.parseEther("10"), // 10 —Ç–æ–∫–µ–Ω–æ–≤
                duration: 15, // 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                tokenAddress: await this.deployment.testToken.getAddress(), // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
                merchant: await merchant.getAddress()
            });

            console.log("üìã –ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ–∑–¥–∞–Ω:");
            console.log("  üí∞ –¶–µ–Ω–∞:", plan.contractPlan.price ? ethers.formatEther(plan.contractPlan.price) : "0", "TOKENS");
            console.log("  ‚è∞ –ü–µ—Ä–∏–æ–¥:", plan.contractPlan.period, "—Å–µ–∫—É–Ω–¥");
            console.log("  üè™ –ú–µ—Ä—á–∞–Ω—Ç:", plan.contractPlan.merchant);

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã –¥–æ –ø–æ–¥–ø–∏—Å–∫–∏
            const addresses = [
                await merchant.getAddress(),
                await subscriber.getAddress()
            ];

            await this.analyzeBalances(addresses, await this.deployment.testToken.getAddress(), "–î–æ –ø–æ–¥–ø–∏—Å–∫–∏");

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–ª–∞–Ω
            console.log("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏...");

            // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–∫–µ–Ω—ã –ø–æ–¥–ø–∏—Å—á–∏–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            const transferAmount = ethers.parseEther("100"); // 100 —Ç–æ–∫–µ–Ω–æ–≤
            await this.deployment.testToken.connect(deployer).transfer(await subscriber.getAddress(), transferAmount);
            console.log("‚úÖ –¢–æ–∫–µ–Ω—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–æ–¥–ø–∏—Å—á–∏–∫—É");

            // –ü–æ–¥–ø–∏—Å—á–∏–∫ –æ–¥–æ–±—Ä—è–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è —Ç—Ä–∞—Ç —Ç–æ–∫–µ–Ω–æ–≤ (PaymentGateway, –Ω–µ SubscriptionManager!)
            const approveAmount = plan.contractPlan.price * 10n; // –û–¥–æ–±—Ä—è–µ–º –±–æ–ª—å—à–µ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
            const paymentGatewayAddress = await this.deployment.gateway.getAddress();
            await this.deployment.testToken.connect(subscriber).approve(
                paymentGatewayAddress,
                approveAmount
            );
            console.log("‚úÖ –¢–æ–∫–µ–Ω—ã –æ–¥–æ–±—Ä–µ–Ω—ã –¥–ª—è PaymentGateway");

            const subscribeTx = await this.deployment.subscriptionManager
                .connect(subscriber)
                .subscribe(plan.contractPlan, plan.signature, "0x");

            const subscribeReceipt = await subscribeTx.wait();
            console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –≥–∞–∑:", subscribeReceipt.gasUsed.toString());

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏
            await this.analyzeBalances(addresses, await this.deployment.testToken.getAddress(), "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏");

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
            const subscriptionInfo = await this.getSubscriptionInfo(await subscriber.getAddress());
            console.log("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:");
            console.log("  üìã Plan Hash:", subscriptionInfo.planHash);
            console.log("  ‚è∞ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ:", new Date(Number(subscriptionInfo.nextBilling) * 1000).toLocaleString());

            // –ñ–¥–µ–º –¥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è
            console.log("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è...");
            const currentTime = Math.floor(Date.now() / 1000);
            const waitTime = Number(subscriptionInfo.nextBilling) - currentTime + 5; // +5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏

            if (waitTime > 0) {
                console.log(`  ‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ ${waitTime} —Å–µ–∫—É–Ω–¥...`);
                await new Promise(resolve => setTimeout(resolve, waitTime * 1000));
            }

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–æ–ª—å AUTOMATION_ROLE –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–∑–æ–≤–∞ charge()
            console.log("\nüîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–∏ AUTOMATION_ROLE...");
            const automationRole = ethers.keccak256(ethers.toUtf8Bytes("AUTOMATION_ROLE"));

            const hasAutomationRole = await this.deployment.core.hasRole(automationRole, await deployer.getAddress());
            if (!hasAutomationRole) {
                await this.deployment.core.grantRole(automationRole, await deployer.getAddress());
                console.log("‚úÖ –†–æ–ª—å AUTOMATION_ROLE –≤—ã–¥–∞–Ω–∞ –¥–µ–ø–ª–æ–µ—Ä—É");
            } else {
                console.log("‚úÖ –†–æ–ª—å AUTOMATION_ROLE —É–∂–µ –µ—Å—Ç—å —É –¥–µ–ø–ª–æ–µ—Ä–∞");
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            console.log("\nüí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è...");
            const subscriberTokenBalance = await this.deployment.testToken.balanceOf(await subscriber.getAddress());
            const allowance = await this.deployment.testToken.allowance(
                await subscriber.getAddress(),
                paymentGatewayAddress
            );
            console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: ${ethers.formatEther(subscriberTokenBalance)} TOKENS`);
            console.log(`‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞: ${ethers.formatEther(allowance)} TOKENS`);

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º
            await this.analyzeBalances(addresses, await this.deployment.testToken.getAddress(), "–ü–µ—Ä–µ–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º");

            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ charge()
            console.log("\nüîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏...");
            const chargeTx = await this.deployment.subscriptionManager
                .connect(deployer) // –ò—Å–ø–æ–ª—å–∑—É–µ–º deployer —Å —Ä–æ–ª—å—é AUTOMATION_ROLE
                .charge(await subscriber.getAddress());

            const chargeReceipt = await chargeTx.wait();
            console.log("‚úÖ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –≥–∞–∑:", chargeReceipt.gasUsed.toString());

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            console.log("\nüìã –ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–¥–ª–µ–Ω–∏—è:");
            const renewalEvents = chargeReceipt.logs.filter((log: any) => {
                try {
                    const parsed = this.deployment.subscriptionManager.interface.parseLog(log);
                    return parsed?.name === "SubscriptionRenewed" || parsed?.name === "SubscriptionCharged";
                } catch {
                    return false;
                }
            });

            renewalEvents.forEach((event: any) => {
                const parsed = this.deployment.subscriptionManager.interface.parseLog(event);
                if (parsed && parsed.name === "SubscriptionRenewed") {
                    console.log("  üîÑ SubscriptionRenewed:");
                    console.log("    üìã Subscription ID:", parsed.args.subscriptionId.toString());
                    console.log("    ‚è∞ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:", new Date(Number(parsed.args.newEndTime) * 1000).toLocaleString());
                } else if (parsed && parsed.name === "SubscriptionCharged") {
                    console.log("  üí∞ SubscriptionCharged:");
                    console.log("    üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", parsed.args.user);
                    console.log("    üíµ –°—É–º–º–∞:", parsed.args.amount ? ethers.formatEther(parsed.args.amount) : "0", "TOKENS");
                    console.log("    ‚è∞ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ:", new Date(Number(parsed.args.nextBilling) * 1000).toLocaleString());
                }
            });

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            await this.analyzeBalances(addresses, await this.deployment.testToken.getAddress(), "–ü–æ—Å–ª–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
            const updatedSubscriptionInfo = await this.getSubscriptionInfo(await subscriber.getAddress());
            console.log("\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:");
            console.log("  üìã Plan Hash:", updatedSubscriptionInfo.planHash);
            console.log("  ‚è∞ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ:", new Date(Number(updatedSubscriptionInfo.nextBilling) * 1000).toLocaleString());

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è –æ–±–Ω–æ–≤–∏–ª–æ—Å—å
            const timeDifference = Number(updatedSubscriptionInfo.nextBilling) - Number(subscriptionInfo.nextBilling);
            console.log("  üîÑ –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:", timeDifference, "—Å–µ–∫—É–Ω–¥");

            if (timeDifference === plan.contractPlan.period) {
                console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥");
            } else {
                console.log("‚ö†Ô∏è –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É");
            }

            return this.createResult(
                "–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏",
                true,
                null,
                {
                    planPrice: plan.contractPlan.price ? ethers.formatEther(plan.contractPlan.price) : "0",
                    currency: "TOKENS",
                    merchant: await merchant.getAddress(),
                    subscriber: await subscriber.getAddress(),
                    gasUsed: chargeReceipt.gasUsed.toString(),
                    subscriptionId: subscriptionInfo.planHash,
                    renewalPeriod: timeDifference,
                    nextBilling: updatedSubscriptionInfo.nextBilling
                }
            );

        } catch (error: any) {
            console.log("‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:", error.message);
            return this.createResult("–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏", false, error.message);
        }
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */
export async function testSubscriptionRenewal(
    deployment: SubscriptionDeployment,
    merchant: Signer,
    subscriber: Signer
): Promise<ScenarioResult> {
    const scenario = new SubscriptionRenewalScenario({
        deployment,
        merchant,
        subscriber
    });

    return await scenario.execute();
}
