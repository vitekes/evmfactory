import { ethers } from "hardhat";
import { Signer, TransactionReceipt } from "ethers";
import { DeploymentResult } from "../utils/deploy";
import { BalanceChange } from "../utils/balance";
import { 
    BaseScenario, 
    ScenarioResult, 
    ScenarioConfig, 
    ScenarioDetails, 
    ContestPrize,
    ContestResult,
    FinalizeResult,
    ParsedLogResult,
    ContestCreatedEventArgs,
    MonetaryPrizePaidEventArgs
} from "./base-scenario";

/**
 * –°—Ü–µ–Ω–∞—Ä–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
 * 
 * –≠—Ç–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç:
 * 1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ —Å –¥–µ–Ω–µ–∂–Ω—ã–º–∏ –ø—Ä–∏–∑–∞–º–∏ –≤ ETH
 * 2. –§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
 * 3. –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–Ω–∫—É—Ä—Å–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
 * 4. –í—ã–¥–∞—á—É –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º
 * 5. –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π –ø–ª–∞—Ç—ë–∂–Ω–æ–≥–æ —à–ª—é–∑–∞
 */
export class MonetaryContestScenario extends BaseScenario {
    private prizes: ContestPrize[];
    private totalPrizeAmount: bigint;

    constructor(deployment: DeploymentResult, creator: Signer, participants: Signer[]) {
        super(
            deployment,
            creator,
            participants,
            new ScenarioConfig(
                "–î–µ–Ω–µ–∂–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å (ETH)",
                "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ —Å –¥–µ–Ω–µ–∂–Ω—ã–º–∏ –ø—Ä–∏–∑–∞–º–∏ –≤ ETH, —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –≤—ã–¥–∞—á–∞ –ø—Ä–∏–∑–æ–≤",
                "–£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞, –≤—ã–¥–∞—á–∞ –ø—Ä–∏–∑–æ–≤ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π"
            )
        );

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–∑–æ–≤: 3 –º–µ—Å—Ç–∞ —Å —É–±—ã–≤–∞—é—â–∏–º–∏ —Å—É–º–º–∞–º–∏
        this.totalPrizeAmount = ethers.parseEther("1.0"); // 1 ETH –æ–±—â–∏–π –ø—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥
        this.prizes = [
            {
                prizeType: 0, // MONETARY
                token: ethers.ZeroAddress, // ETH
                amount: ethers.parseEther("0.5").toString(), // 1-–µ –º–µ—Å—Ç–æ: 0.5 ETH
                distribution: 0, // flat distribution
                uri: ""
            },
            {
                prizeType: 0, // MONETARY
                token: ethers.ZeroAddress, // ETH
                amount: ethers.parseEther("0.3").toString(), // 2-–µ –º–µ—Å—Ç–æ: 0.3 ETH
                distribution: 0, // flat distribution
                uri: ""
            },
            {
                prizeType: 0, // MONETARY
                token: ethers.ZeroAddress, // ETH
                amount: ethers.parseEther("0.2").toString(), // 3-–µ –º–µ—Å—Ç–æ: 0.2 ETH
                distribution: 0, // flat distribution
                uri: ""
            }
        ];
    }

    protected async createContest(): Promise<ContestResult> {
        console.log("üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞ —Å –ø—Ä–∏–∑–∞–º–∏ –≤ ETH...");
        console.log(`üèÜ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: ${ethers.formatEther(this.totalPrizeAmount)} ETH`);
        console.log("ü•á 1-–µ –º–µ—Å—Ç–æ: 0.5 ETH");
        console.log("ü•à 2-–µ –º–µ—Å—Ç–æ: 0.3 ETH");
        console.log("ü•â 3-–µ –º–µ—Å—Ç–æ: 0.2 ETH");

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–Ω–∫—É—Ä—Å–æ–≤
        const contestFactory = await ethers.getContractAt(
            "ContestFactory",
            this.deployment.addresses.contestFactory
        );

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–∫—É—Ä—Å —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π ETH –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–∑–æ–≤
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º staticCall –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–∞–¥—Ä–µ—Å–∞ —ç—Å–∫—Ä–æ—É)
        const escrowAddress = await contestFactory
            .connect(this.creator)
            .createContest.staticCall(this.prizes, "0x", {
                value: this.totalPrizeAmount
            });

        // –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const tx = await contestFactory
            .connect(this.creator)
            .createContest(this.prizes, "0x", {
                value: this.totalPrizeAmount
            });

        const receipt = await tx.wait();
        console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");
        console.log(`‚õΩ –ì–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: ${receipt.gasUsed.toString()}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ receipt –∏ logs
        if (!receipt || !receipt.logs) {
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞");
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–æ–Ω–∫—É—Ä—Å–∞ –∏–∑ —Å–æ–±—ã—Ç–∏–π
        const contestCreatedEvent = receipt.logs.find((log: any) => {
            try {
                const parsed = contestFactory.interface.parseLog(log) as ParsedLogResult;
                return parsed?.name === "ContestCreated";
            } catch {
                return false;
            }
        });

        if (!contestCreatedEvent) {
            throw new Error("–°–æ–±—ã—Ç–∏–µ ContestCreated –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        }

        const parsedEvent = contestFactory.interface.parseLog(contestCreatedEvent) as ParsedLogResult;
        const eventArgs = parsedEvent.args as ContestCreatedEventArgs;
        const contestId = eventArgs.contestId.toString();

        console.log(`üÜî ID –∫–æ–Ω–∫—É—Ä—Å–∞: ${contestId}`);
        console.log(`üì¶ –ê–¥—Ä–µ—Å —ç—Å–∫—Ä–æ—É: ${escrowAddress}`);

        return {
            escrowAddress,
            contestId,
            totalPrizeValue: ethers.formatEther(this.totalPrizeAmount),
            receipt
        };
    }

    protected async finalizeContest(escrowAddress: string): Promise<FinalizeResult> {
        console.log("üéØ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞...");

        // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const winners = [];
        for (let i = 0; i < Math.min(this.prizes.length, this.participants.length); i++) {
            winners.push(await this.participants[i].getAddress());
        }

        console.log("üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:");
        winners.forEach((winner, index) => {
            const place = index === 0 ? "ü•á" : index === 1 ? "ü•à" : "ü•â";
            const prize = ethers.formatEther(this.prizes[index].amount);
            console.log(`  ${place} ${winner}: ${prize} ETH`);
        });

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —ç—Å–∫—Ä–æ—É
        const contestEscrow = await ethers.getContractAt("ContestEscrow", escrowAddress);

        // –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—É—Ä—Å
        const priorityCap = ethers.parseUnits("20", "gwei"); // 20 gwei priority fee cap
        const tx = await contestEscrow
            .connect(this.creator)
            .finalize(winners, priorityCap);

        const receipt = await tx.wait();
        console.log("‚úÖ –ö–æ–Ω–∫—É—Ä—Å —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        console.log(`‚õΩ –ì–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: ${receipt.gasUsed.toString()}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ receipt –∏ logs
        if (!receipt || !receipt.logs) {
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω–∫—É—Ä—Å–∞");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤—ã–¥–∞—á–∏ –ø—Ä–∏–∑–æ–≤
        const prizeEvents = receipt.logs.filter((log: any) => {
            try {
                const parsed = contestEscrow.interface.parseLog(log) as ParsedLogResult;
                return parsed?.name === "MonetaryPrizePaid";
            } catch {
                return false;
            }
        });

        console.log(`üéÅ –í—ã–¥–∞–Ω–æ –ø—Ä–∏–∑–æ–≤: ${prizeEvents.length}`);
        prizeEvents.forEach((event: any, index: number) => {
            const parsed = contestEscrow.interface.parseLog(event) as ParsedLogResult;
            const eventArgs = parsed.args as MonetaryPrizePaidEventArgs;
            const winner = eventArgs.to;
            const amount = ethers.formatEther(eventArgs.amount);
            console.log(`  –ü—Ä–∏–∑ ${index + 1}: ${winner} –ø–æ–ª—É—á–∏–ª ${amount} ETH`);
        });

        return {
            winners,
            receipt
        };
    }

    protected async buildResultDetails(
        contestResult: ContestResult,
        finalizeResult: FinalizeResult,
        creatorChanges?: BalanceChange,
        gatewayChanges?: BalanceChange,
        receipt?: TransactionReceipt
    ): Promise<ScenarioDetails> {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É, –ø–æ–ª—É—á–µ–Ω–Ω—É—é –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏
        let totalWinnersReceived = 0n;
        for (const prize of this.prizes) {
            totalWinnersReceived += BigInt(prize.amount);
        }

        return new ScenarioDetails(
            contestResult.contestId,
            this.prizes.length,
            contestResult.totalPrizeValue,
            "ETH",
            creatorChanges?.changes?.[0] ? ethers.formatEther(Math.abs(Number(creatorChanges.changes[0].change || 0))) : "0",
            ethers.formatEther(totalWinnersReceived),
            gatewayChanges?.changes?.[0] ? ethers.formatEther(gatewayChanges.changes[0].change || 0) : "0",
            receipt ? receipt.gasUsed.toString() : "0"
        );
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
 */
export async function testMonetaryContest(
    deployment: DeploymentResult,
    creator: Signer,
    participants: Signer[]
): Promise<ScenarioResult> {
    const scenario = new MonetaryContestScenario(deployment, creator, participants);
    return await scenario.execute();
}
