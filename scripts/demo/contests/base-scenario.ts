import { ethers } from "hardhat";
import { Signer, TransactionReceipt } from "ethers";
import { DeploymentResult } from "../utils/deploy";
import {
    getAccountBalances,
    getMultipleAccountBalances,
    displayBalances,
    displayMultipleBalances,
    calculateBalanceChanges,
    calculateMultipleBalanceChanges,
    displayBalanceChanges,
    displayMultipleBalanceChanges,
    analyzeFees,
    prepareTokensForTesting,
    checkSufficientBalance,
    BalanceInfo,
    BalanceChange
} from "../utils/balance";

// –¢–∏–ø—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
export class ScenarioResult {
    constructor(
        public name: string,
        public success: boolean,
        public error?: string,
        public details?: ScenarioDetails
    ) {}
}

export class ScenarioDetails {
    constructor(
        public contestId: string,
        public prizeCount: number,
        public totalPrizeValue: string,
        public currency: string,
        public creatorSpent: string,
        public winnersReceived: string,
        public gatewayEarned: string,
        public gasUsed: string
    ) {}
}

export class ScenarioConfig {
    constructor(
        public contestName: string,
        public description: string,
        public expectedOutcome: string
    ) {}
}

export interface ContestPrize {
    prizeType: number; // 0 = MONETARY, 1 = PROMO
    token: string;
    amount: string;
    distribution: number; // 0 = flat, 1 = descending
    uri: string;
}

export interface ContestDeployment {
    contestFactory: any;
    paymentGateway: any;
    testToken: any;
    core: any;
}

// Type definitions for parsed log events
export interface ParsedLogResult {
    name: string;
    args: any;
}

export interface ContestCreatedEventArgs {
    contestId: string;
    creator: string;
    escrow: string;
}

export interface MonetaryPrizePaidEventArgs {
    to: string;
    amount: string;
    slot: number;
}

export interface PromoPrizeIssuedEventArgs {
    to: string;
    slot: number;
    uri: string;
}

// Type definitions for method parameters
export interface ContestResult {
    escrowAddress: string;
    contestId: string;
    totalPrizeValue: string;
    receipt: any;
}

export interface FinalizeResult {
    winners: string[];
    receipt: any;
}

export class BaseScenario {
    protected deployment: DeploymentResult;
    protected creator: Signer;
    protected participants: Signer[];
    protected config: ScenarioConfig;

    constructor(
        deployment: DeploymentResult,
        creator: Signer,
        participants: Signer[],
        config: ScenarioConfig
    ) {
        this.deployment = deployment;
        this.creator = creator;
        this.participants = participants;
        this.config = config;
    }

    async execute(): Promise<ScenarioResult> {
        console.log(`\nüéØ –°–¶–ï–ù–ê–†–ò–ô: ${this.config.contestName}`);
        console.log("=".repeat(60));
        console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${this.config.description}`);
        console.log(`üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${this.config.expectedOutcome}`);
        console.log("=".repeat(60));

        try {
            // 0. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–≤
            console.log("üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–≤...");
            await this.setupContestRoles();

            // 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
            console.log("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...");
            await this.prepareTokens();

            // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤
            const addresses = await this.getAddresses();
            const initialBalances = await getMultipleAccountBalances(addresses, this.getTokenAddresses());

            console.log("\nüí∞ –ù–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:");
            await displayMultipleBalances(initialBalances);

            // 3. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞
            console.log("\nüèÜ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞...");
            const contestResult = await this.createContest();

            // 4. –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ (–≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –≤—ã–¥–∞—á–∞ –ø—Ä–∏–∑–æ–≤)
            console.log("\nüéâ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞...");
            const finalizeResult = await this.finalizeContest(contestResult.escrowAddress);

            // 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤
            const finalBalances = await getMultipleAccountBalances(addresses, this.getTokenAddresses());

            console.log("\nüí∞ –§–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:");
            await displayMultipleBalances(finalBalances);

            // 6. –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–æ–≤
            const balanceChanges = calculateMultipleBalanceChanges(initialBalances, finalBalances);
            console.log("\nüìä –ò–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤:");
            displayMultipleBalanceChanges(balanceChanges);

            // 7. –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π
            const creatorAddress = await this.creator.getAddress();
            const creatorChanges = balanceChanges.find(bc => bc.address === creatorAddress);
            const gatewayChanges = balanceChanges.find(bc => bc.address === this.deployment.addresses.gateway);

            if (creatorChanges && gatewayChanges) {
                await this.analyzeCommissions(creatorChanges, gatewayChanges, contestResult.totalPrizeValue);
            }

            // 8. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            const details = await this.buildResultDetails(
                contestResult,
                finalizeResult,
                creatorChanges,
                gatewayChanges,
                finalizeResult.receipt
            );

            console.log(`\n‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π "${this.config.contestName}" –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
            return new ScenarioResult(this.config.contestName, true, undefined, details);

        } catch (error) {
            console.error(`\n‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "${this.config.contestName}":`, error);
            return new ScenarioResult(
                this.config.contestName,
                false,
                error instanceof Error ? error.message : String(error)
            );
        }
    }

    protected async prepareTokens(): Promise<void> {
        console.log("ü™ô –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–Ω–∫—É—Ä—Å–∞...");

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞
        if (this.deployment.testToken) {
            const amount = ethers.parseEther("1000"); // 1000 —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await prepareTokensForTesting(
                this.deployment.testToken,
                this.creator,
                this.deployment.addresses.gateway,
                amount
            );
        }

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for (const participant of this.participants) {
            if (this.deployment.testToken) {
                const amount = ethers.parseEther("100"); // 100 —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                await prepareTokensForTesting(
                    this.deployment.testToken,
                    participant,
                    this.deployment.addresses.gateway,
                    amount
                );
            }
        }

        console.log("‚úÖ –¢–æ–∫–µ–Ω—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
    }

    protected async setupContestRoles(): Promise<void> {
        console.log("üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–≤...");

        // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å FEATURE_OWNER_ROLE
        const featureOwnerRole = ethers.keccak256(ethers.toUtf8Bytes("FEATURE_OWNER_ROLE"));
        const creatorAddress = await this.creator.getAddress();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–æ–ª—å —É —Å–æ–∑–¥–∞—Ç–µ–ª—è
        const hasRole = await this.deployment.core.hasRole(featureOwnerRole, creatorAddress);

        if (!hasRole) {
            console.log("‚ö†Ô∏è –í—ã–¥–∞—á–∞ —Ä–æ–ª–∏ FEATURE_OWNER_ROLE —Å–æ–∑–¥–∞—Ç–µ–ª—é –∫–æ–Ω–∫—É—Ä—Å–∞...");

            // –ü–æ–ª—É—á–∞–µ–º –¥–µ–ø–ª–æ–µ—Ä–∞ (–ø–µ—Ä–≤—ã–π signer), –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            const [deployer] = await ethers.getSigners();

            // –í—ã–¥–∞–µ–º —Ä–æ–ª—å –æ—Ç –∏–º–µ–Ω–∏ –¥–µ–ø–ª–æ–µ—Ä–∞
            const tx = await this.deployment.core.connect(deployer).grantRole(featureOwnerRole, creatorAddress);
            await tx.wait(); // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            console.log("‚úÖ –†–æ–ª—å FEATURE_OWNER_ROLE –≤—ã–¥–∞–Ω–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∫–æ–Ω–∫—É—Ä—Å–∞");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–¥–∞–Ω–∞
            const hasRoleAfter = await this.deployment.core.hasRole(featureOwnerRole, creatorAddress);
            if (!hasRoleAfter) {
                throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å FEATURE_OWNER_ROLE —Å–æ–∑–¥–∞—Ç–µ–ª—é –∫–æ–Ω–∫—É—Ä—Å–∞");
            }
        } else {
            console.log("‚úÖ –†–æ–ª—å FEATURE_OWNER_ROLE —É–∂–µ –µ—Å—Ç—å —É —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞");
        }
    }

    protected async getAddresses(): Promise<string[]> {
        const addresses = [await this.creator.getAddress()];
        for (const participant of this.participants) {
            addresses.push(await participant.getAddress());
        }
        addresses.push(this.deployment.addresses.gateway);
        return addresses;
    }

    protected getTokenAddresses(): string[] {
        return [ethers.ZeroAddress, this.deployment.addresses.testToken];
    }

    protected async createContest(): Promise<ContestResult> {
        throw new Error("createContest must be implemented by subclass");
    }

    protected async finalizeContest(escrowAddress: string): Promise<FinalizeResult> {
        throw new Error("finalizeContest must be implemented by subclass");
    }

    protected async analyzeCommissions(
        creatorChanges: BalanceChange,
        gatewayChanges: BalanceChange,
        totalPrizeValue: string
    ): Promise<void> {
        console.log("\nüí∏ –ê–ù–ê–õ–ò–ó –ö–û–ú–ò–°–°–ò–ô:");
        console.log("=".repeat(40));

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        for (const tokenAddress of this.getTokenAddresses()) {
            const tokenSymbol = tokenAddress === ethers.ZeroAddress ? "ETH" : "TEST";

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ changes –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º find()
            const creatorChange = creatorChanges?.changes?.find(c => c.token === tokenAddress);
            const gatewayChange = gatewayChanges?.changes?.find(c => c.token === tokenAddress);

            if (creatorChange && gatewayChange) {
                console.log(`\nü™ô ${tokenSymbol}:`);
                console.log(`  –°–æ–∑–¥–∞—Ç–µ–ª—å –ø–æ—Ç—Ä–∞—Ç–∏–ª: ${ethers.formatEther(Math.abs(Number(creatorChange.change)))} ${tokenSymbol}`);
                console.log(`  Gateway –∑–∞—Ä–∞–±–æ—Ç–∞–ª: ${ethers.formatEther(gatewayChange.change)} ${tokenSymbol}`);

                if (Number(creatorChange.change) < 0 && Number(gatewayChange.change) > 0) {
                    const feePercentage = (Number(gatewayChange.change) / Math.abs(Number(creatorChange.change))) * 100;
                    console.log(`  –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏: ${feePercentage.toFixed(2)}%`);
                }
            }
        }
    }

    protected async buildResultDetails(
        contestResult: ContestResult,
        finalizeResult: FinalizeResult,
        creatorChanges?: BalanceChange,
        gatewayChanges?: BalanceChange,
        receipt?: TransactionReceipt
    ): Promise<ScenarioDetails> {
        const currency = "ETH"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ETH, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö

        return new ScenarioDetails(
            contestResult.contestId,
            finalizeResult.winners.length,
            contestResult.totalPrizeValue,
            currency,
            creatorChanges ? ethers.formatEther(Math.abs(Number(creatorChanges.changes[0]?.change || 0))) : "0",
            "Calculated in subclass", // –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö
            gatewayChanges ? ethers.formatEther(gatewayChanges.changes[0]?.change || 0) : "0",
            receipt ? receipt.gasUsed.toString() : "0"
        );
    }
}
