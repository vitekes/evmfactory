import { ethers } from "hardhat";
import { Signer, TransactionReceipt } from "ethers";
import { DeploymentResult } from "../utils/deploy";
import { BalanceChange } from "../utils/balance";
import { 
    BaseScenario, 
    ScenarioResult, 
    ScenarioConfig, 
    ScenarioDetails, 
    ContestPrize,
    ContestResult,
    FinalizeResult,
    ParsedLogResult,
    ContestCreatedEventArgs,
    MonetaryPrizePaidEventArgs,
    PromoPrizeIssuedEventArgs
} from "./base-scenario";

/**
 * –°—Ü–µ–Ω–∞—Ä–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞ (–¥–µ–Ω–µ–∂–Ω—ã–µ + –ø—Ä–æ–º–æ-–ø—Ä–∏–∑—ã)
 * 
 * –≠—Ç–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç:
 * 1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ —Å –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π –¥–µ–Ω–µ–∂–Ω—ã—Ö –∏ –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–æ–≤
 * 2. –§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤
 * 3. –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–Ω–∫—É—Ä—Å–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
 * 4. –í—ã–¥–∞—á—É –∫–∞–∫ –¥–µ–Ω–µ–∂–Ω—ã—Ö, —Ç–∞–∫ –∏ –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–æ–≤
 * 5. –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π —Ç–æ–ª—å–∫–æ —Å –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤
 * 6. –ü—Ä–æ–≤–µ—Ä–∫—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–∏–∑–æ–≤
 */
export class MixedContestScenario extends BaseScenario {
    private prizes: ContestPrize[];
    private totalMonetaryAmount: bigint;

    constructor(deployment: DeploymentResult, creator: Signer, participants: Signer[]) {
        super(
            deployment,
            creator,
            participants,
            new ScenarioConfig(
                "–°–º–µ—à–∞–Ω–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å (ETH + –ü—Ä–æ–º–æ)",
                "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ —Å –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π –¥–µ–Ω–µ–∂–Ω—ã—Ö –∏ –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–æ–≤, —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –≤—ã–¥–∞—á–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–∏–∑–æ–≤",
                "–£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞, –≤—ã–¥–∞—á–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö –∏ –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–æ–≤, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π —Ç–æ–ª—å–∫–æ —Å –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤"
            )
        );

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–º–µ—à–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤: –¥–µ–Ω–µ–∂–Ω—ã–µ –∏ –ø—Ä–æ–º–æ-–ø—Ä–∏–∑—ã
        this.totalMonetaryAmount = ethers.parseEther("0.6"); // 0.6 ETH –¥–ª—è –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤
        this.prizes = [
            {
                prizeType: 0, // MONETARY
                token: ethers.ZeroAddress, // ETH
                amount: ethers.parseEther("0.4").toString(), // 1-–µ –º–µ—Å—Ç–æ: 0.4 ETH
                distribution: 0, // flat distribution
                uri: ""
            },
            {
                prizeType: 1, // PROMO
                token: ethers.ZeroAddress, // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–æ–≤
                amount: "0", // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–æ–≤
                distribution: 0, // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–æ–≤
                uri: "https://example.com/promo/premium-access"
            },
            {
                prizeType: 0, // MONETARY
                token: ethers.ZeroAddress, // ETH
                amount: ethers.parseEther("0.2").toString(), // 3-–µ –º–µ—Å—Ç–æ: 0.2 ETH
                distribution: 0, // flat distribution
                uri: ""
            },
            {
                prizeType: 1, // PROMO
                token: ethers.ZeroAddress,
                amount: "0",
                distribution: 0,
                uri: "https://example.com/promo/special-badge"
            }
        ];
    }

    protected async createContest(): Promise<ContestResult> {
        console.log("üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞ —Å –¥–µ–Ω–µ–∂–Ω—ã–º–∏ –∏ –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–∞–º–∏...");
        console.log(`üèÜ –û–±—â–∏–π –¥–µ–Ω–µ–∂–Ω—ã–π —Ñ–æ–Ω–¥: ${ethers.formatEther(this.totalMonetaryAmount)} ETH`);
        console.log("üèÖ –ü—Ä–∏–∑—ã:");
        console.log("ü•á 1-–µ –º–µ—Å—Ç–æ: 0.4 ETH (–¥–µ–Ω–µ–∂–Ω—ã–π)");
        console.log("ü•à 2-–µ –º–µ—Å—Ç–æ: –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø (–ø—Ä–æ–º–æ)");
        console.log("ü•â 3-–µ –º–µ—Å—Ç–æ: 0.2 ETH (–¥–µ–Ω–µ–∂–Ω—ã–π)");
        console.log("üè∑Ô∏è 4-–µ –º–µ—Å—Ç–æ: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫ (–ø—Ä–æ–º–æ)");

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–Ω–∫—É—Ä—Å–æ–≤
        const contestFactory = await ethers.getContractAt(
            "ContestFactory",
            this.deployment.addresses.contestFactory
        );

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–∫—É—Ä—Å —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π ETH —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º staticCall –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–∞–¥—Ä–µ—Å–∞ —ç—Å–∫—Ä–æ—É)
        const escrowAddress = await contestFactory
            .connect(this.creator)
            .createContest.staticCall(this.prizes, "0x", {
                value: this.totalMonetaryAmount
            });

        // –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const tx = await contestFactory
            .connect(this.creator)
            .createContest(this.prizes, "0x", {
                value: this.totalMonetaryAmount
            });

        const receipt = await tx.wait();
        console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");
        console.log(`‚õΩ –ì–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: ${receipt.gasUsed.toString()}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ receipt –∏ logs
        if (!receipt || !receipt.logs) {
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞");
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–æ–Ω–∫—É—Ä—Å–∞ –∏–∑ —Å–æ–±—ã—Ç–∏–π
        const contestCreatedEvent = receipt.logs.find((log: any) => {
            try {
                const parsed = contestFactory.interface.parseLog(log) as ParsedLogResult;
                return parsed?.name === "ContestCreated";
            } catch {
                return false;
            }
        });

        if (!contestCreatedEvent) {
            throw new Error("–°–æ–±—ã—Ç–∏–µ ContestCreated –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        }

        const parsedEvent = contestFactory.interface.parseLog(contestCreatedEvent) as ParsedLogResult;
        const eventArgs = parsedEvent.args as ContestCreatedEventArgs;
        const contestId = eventArgs.contestId.toString();

        console.log(`üÜî ID –∫–æ–Ω–∫—É—Ä—Å–∞: ${contestId}`);
        console.log(`üì¶ –ê–¥—Ä–µ—Å —ç—Å–∫—Ä–æ—É: ${escrowAddress}`);

        return {
            escrowAddress,
            contestId,
            totalPrizeValue: ethers.formatEther(this.totalMonetaryAmount),
            receipt
        };
    }

    protected async finalizeContest(escrowAddress: string): Promise<FinalizeResult> {
        console.log("üéØ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞...");

        // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const winners = [];
        for (let i = 0; i < Math.min(this.prizes.length, this.participants.length); i++) {
            winners.push(await this.participants[i].getAddress());
        }

        console.log("üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:");
        winners.forEach((winner, index) => {
            const place = this.getPlaceEmoji(index);
            const prizeDescription = this.getPrizeDescription(index);
            console.log(`  ${place} ${winner}: ${prizeDescription}`);
        });

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —ç—Å–∫—Ä–æ—É
        const contestEscrow = await ethers.getContractAt("ContestEscrow", escrowAddress);

        // –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—É—Ä—Å
        const priorityCap = ethers.parseUnits("20", "gwei"); // 20 gwei priority fee cap
        const tx = await contestEscrow
            .connect(this.creator)
            .finalize(winners, priorityCap);

        const receipt = await tx.wait();
        console.log("‚úÖ –ö–æ–Ω–∫—É—Ä—Å —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        console.log(`‚õΩ –ì–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: ${receipt.gasUsed.toString()}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ receipt –∏ logs
        if (!receipt || !receipt.logs) {
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω–∫—É—Ä—Å–∞");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤—ã–¥–∞—á–∏ –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤
        const monetaryEvents = receipt.logs.filter((log: any) => {
            try {
                const parsed = contestEscrow.interface.parseLog(log) as ParsedLogResult;
                return parsed?.name === "MonetaryPrizePaid";
            } catch {
                return false;
            }
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤—ã–¥–∞—á–∏ –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–æ–≤
        const promoEvents = receipt.logs.filter((log: any) => {
            try {
                const parsed = contestEscrow.interface.parseLog(log) as ParsedLogResult;
                return parsed?.name === "PromoPrizeIssued";
            } catch {
                return false;
            }
        });

        console.log(`üí∞ –í—ã–¥–∞–Ω–æ –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤: ${monetaryEvents.length}`);
        monetaryEvents.forEach((event: any, index: number) => {
            const parsed = contestEscrow.interface.parseLog(event) as ParsedLogResult;
            const eventArgs = parsed.args as MonetaryPrizePaidEventArgs;
            const winner = eventArgs.to;
            const amount = ethers.formatEther(eventArgs.amount);
            console.log(`  –î–µ–Ω–µ–∂–Ω—ã–π –ø—Ä–∏–∑ ${index + 1}: ${winner} –ø–æ–ª—É—á–∏–ª ${amount} ETH`);
        });

        console.log(`üéÅ –í—ã–¥–∞–Ω–æ –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–æ–≤: ${promoEvents.length}`);
        promoEvents.forEach((event: any, index: number) => {
            const parsed = contestEscrow.interface.parseLog(event) as ParsedLogResult;
            const eventArgs = parsed.args as PromoPrizeIssuedEventArgs;
            const slot = eventArgs.slot;
            const winner = eventArgs.to;
            const uri = eventArgs.uri;
            console.log(`  –ü—Ä–æ–º–æ-–ø—Ä–∏–∑ ${Number(slot) + 1}: ${winner}`);
            console.log(`    URI: ${uri}`);
        });

        return {
            winners,
            receipt
        };
    }

    private getPlaceEmoji(index: number): string {
        switch (index) {
            case 0: return "ü•á";
            case 1: return "ü•à";
            case 2: return "ü•â";
            case 3: return "üè∑Ô∏è";
            default: return "üèÖ";
        }
    }

    private getPrizeDescription(index: number): string {
        const prize = this.prizes[index];
        if (prize.prizeType === 0) { // MONETARY
            return `${ethers.formatEther(prize.amount)} ETH (–¥–µ–Ω–µ–∂–Ω—ã–π)`;
        } else { // PROMO
            switch (index) {
                case 1: return "–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø (–ø—Ä–æ–º–æ)";
                case 3: return "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫ (–ø—Ä–æ–º–æ)";
                default: return "–ü—Ä–æ–º–æ-–ø—Ä–∏–∑";
            }
        }
    }

    protected async buildResultDetails(
        contestResult: ContestResult,
        finalizeResult: FinalizeResult,
        creatorChanges?: any,
        gatewayChanges?: any,
        receipt?: TransactionReceipt
    ): Promise<ScenarioDetails> {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—É—é –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏
        let totalMonetaryReceived = 0n;
        let promoCount = 0;

        for (const prize of this.prizes) {
            if (prize.prizeType === 0) { // MONETARY
                totalMonetaryReceived += BigInt(prize.amount);
            } else { // PROMO
                promoCount++;
            }
        }

        const winnersReceived = `${ethers.formatEther(totalMonetaryReceived)} ETH + ${promoCount} –ø—Ä–æ–º–æ`;

        return new ScenarioDetails(
            contestResult.contestId,
            this.prizes.length,
            contestResult.totalPrizeValue,
            "MIXED",
            creatorChanges?.changes?.[0] ? ethers.formatEther(Math.abs(Number(creatorChanges.changes[0].change || 0))) : "0",
            winnersReceived,
            gatewayChanges?.changes?.[0] ? ethers.formatEther(gatewayChanges.changes[0].change || 0) : "0",
            receipt ? receipt.gasUsed.toString() : "0"
        );
    }

    protected async analyzeCommissions(
        creatorChanges: BalanceChange,
        gatewayChanges: BalanceChange,
        totalPrizeValue: string
    ): Promise<void> {
        console.log("\nüí∏ –ê–ù–ê–õ–ò–ó –ö–û–ú–ò–°–°–ò–ô:");
        console.log("=".repeat(40));
        console.log("üéØ –°–º–µ—à–∞–Ω–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å: –∫–æ–º–∏—Å—Å–∏–∏ —Ç–æ–ª—å–∫–æ —Å –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤");
        console.log(`üí∞ –î–µ–Ω–µ–∂–Ω—ã–µ –ø—Ä–∏–∑—ã: ${ethers.formatEther(this.totalMonetaryAmount)} ETH`);
        console.log("üéÅ –ü—Ä–æ–º–æ-–ø—Ä–∏–∑—ã: –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π");

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        for (const tokenAddress of this.getTokenAddresses()) {
            const tokenSymbol = tokenAddress === ethers.ZeroAddress ? "ETH" : "TEST";

            const creatorChange = creatorChanges?.changes?.find((c: any) => c.token === tokenAddress);
            const gatewayChange = gatewayChanges?.changes?.find((c: any) => c.token === tokenAddress);

            if (creatorChange && gatewayChange) {
                console.log(`\nü™ô ${tokenSymbol}:`);
                console.log(`  –°–æ–∑–¥–∞—Ç–µ–ª—å –ø–æ—Ç—Ä–∞—Ç–∏–ª: ${ethers.formatEther(Math.abs(Number(creatorChange.change)))} ${tokenSymbol}`);
                console.log(`  Gateway –∑–∞—Ä–∞–±–æ—Ç–∞–ª: ${ethers.formatEther(gatewayChange.change)} ${tokenSymbol}`);

                if (Number(creatorChange.change) < 0 && Number(gatewayChange.change) > 0) {
                    const feePercentage = (Number(gatewayChange.change) / Math.abs(Number(creatorChange.change))) * 100;
                    console.log(`  –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏: ${feePercentage.toFixed(2)}%`);
                }

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–±–∏–≤–∫—É –ø–æ —Ç–∏–ø–∞–º –ø—Ä–∏–∑–æ–≤
                const monetarySpent = Number(this.totalMonetaryAmount);
                const gasSpent = Math.abs(Number(creatorChange.change)) - monetarySpent;
                console.log(`  –ò–∑ –Ω–∏—Ö:`);
                console.log(`    –ù–∞ –¥–µ–Ω–µ–∂–Ω—ã–µ –ø—Ä–∏–∑—ã: ${ethers.formatEther(monetarySpent)} ${tokenSymbol}`);
                console.log(`    –ù–∞ –≥–∞–∑: ${ethers.formatEther(gasSpent)} ${tokenSymbol}`);
            }
        }
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
 */
export async function testMixedContest(
    deployment: DeploymentResult,
    creator: Signer,
    participants: Signer[]
): Promise<ScenarioResult> {
    const scenario = new MixedContestScenario(deployment, creator, participants);
    return await scenario.execute();
}
