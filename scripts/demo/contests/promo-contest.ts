import { ethers } from "hardhat";
import { Signer, TransactionReceipt } from "ethers";
import { DeploymentResult } from "../utils/deploy";
import { BalanceChange } from "../utils/balance";
import { 
    BaseScenario, 
    ScenarioResult, 
    ScenarioConfig, 
    ScenarioDetails, 
    ContestPrize,
    ContestResult,
    FinalizeResult,
    ParsedLogResult,
    ContestCreatedEventArgs,
    PromoPrizeIssuedEventArgs
} from "./base-scenario";

/**
 * –°—Ü–µ–Ω–∞—Ä–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–µ–Ω–µ–∂–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞ (–ø—Ä–æ–º–æ-–ø—Ä–∏–∑—ã)
 * 
 * –≠—Ç–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç:
 * 1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ —Å –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–∞–º–∏ (–Ω–µ–¥–µ–Ω–µ–∂–Ω—ã–º–∏)
 * 2. –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–Ω–∫—É—Ä—Å–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
 * 3. –í—ã–¥–∞—á—É –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–æ–≤ (—Å–æ–±—ã—Ç–∏—è —Å URI)
 * 4. –ü—Ä–æ–≤–µ—Ä–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 * 5. –ê–Ω–∞–ª–∏–∑ –≥–∞–∑–æ–≤—ã—Ö –∑–∞—Ç—Ä–∞—Ç –±–µ–∑ –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
 */
export class PromoContestScenario extends BaseScenario {
    private prizes: ContestPrize[];

    constructor(deployment: DeploymentResult, creator: Signer, participants: Signer[]) {
        super(
            deployment,
            creator,
            participants,
            new ScenarioConfig(
                "–ù–µ–¥–µ–Ω–µ–∂–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å (–ü—Ä–æ–º–æ-–ø—Ä–∏–∑—ã)",
                "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞ —Å –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–∞–º–∏, —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –≤—ã–¥–∞—á–∞ –Ω–µ–¥–µ–Ω–µ–∂–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤",
                "–£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞, –≤—ã–¥–∞—á–∞ –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–æ–≤ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –≥–∞–∑–æ–≤—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã"
            )
        );

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–æ–≤: 3 –º–µ—Å—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–æ–º–æ-–∫–æ–¥–∞–º–∏
        this.prizes = [
            {
                prizeType: 1, // PROMO
                token: ethers.ZeroAddress, // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–æ–≤
                amount: "0", // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–æ–≤
                distribution: 0, // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–æ–≤
                uri: "https://example.com/promo/gold-membership"
            },
            {
                prizeType: 1, // PROMO
                token: ethers.ZeroAddress,
                amount: "0",
                distribution: 0,
                uri: "https://example.com/promo/silver-discount-50"
            },
            {
                prizeType: 1, // PROMO
                token: ethers.ZeroAddress,
                amount: "0",
                distribution: 0,
                uri: "https://example.com/promo/bronze-bonus-pack"
            }
        ];
    }

    protected async createContest(): Promise<ContestResult> {
        console.log("üéÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–µ–Ω–µ–∂–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞ —Å –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–∞–º–∏...");
        console.log("üèÜ –ü—Ä–∏–∑—ã:");
        console.log("ü•á 1-–µ –º–µ—Å—Ç–æ: –ó–æ–ª–æ—Ç–æ–µ —á–ª–µ–Ω—Å—Ç–≤–æ");
        console.log("ü•à 2-–µ –º–µ—Å—Ç–æ: –°–∫–∏–¥–∫–∞ 50%");
        console.log("ü•â 3-–µ –º–µ—Å—Ç–æ: –ë–æ–Ω—É—Å–Ω—ã–π –ø–∞–∫–µ—Ç");

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–Ω–∫—É—Ä—Å–æ–≤
        const contestFactory = await ethers.getContractAt(
            "ContestFactory",
            this.deployment.addresses.contestFactory
        );

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–∫—É—Ä—Å –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ ETH (–ø—Ä–æ–º–æ-–ø—Ä–∏–∑—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è)
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º staticCall –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–∞–¥—Ä–µ—Å–∞ —ç—Å–∫—Ä–æ—É)
        const escrowAddress = await contestFactory
            .connect(this.creator)
            .createContest.staticCall(this.prizes, "0x");

        // –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const tx = await contestFactory
            .connect(this.creator)
            .createContest(this.prizes, "0x");

        const receipt = await tx.wait();
        console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");
        console.log(`‚õΩ –ì–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: ${receipt.gasUsed.toString()}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ receipt –∏ logs
        if (!receipt || !receipt.logs) {
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞");
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–æ–Ω–∫—É—Ä—Å–∞ –∏–∑ —Å–æ–±—ã—Ç–∏–π
        const contestCreatedEvent = receipt.logs.find((log: any) => {
            try {
                const parsed = contestFactory.interface.parseLog(log) as ParsedLogResult;
                return parsed?.name === "ContestCreated";
            } catch {
                return false;
            }
        });

        if (!contestCreatedEvent) {
            throw new Error("–°–æ–±—ã—Ç–∏–µ ContestCreated –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        }

        const parsedEvent = contestFactory.interface.parseLog(contestCreatedEvent) as ParsedLogResult;
        const eventArgs = parsedEvent.args as ContestCreatedEventArgs;
        const contestId = eventArgs.contestId.toString();

        console.log(`üÜî ID –∫–æ–Ω–∫—É—Ä—Å–∞: ${contestId}`);
        console.log(`üì¶ –ê–¥—Ä–µ—Å —ç—Å–∫—Ä–æ—É: ${escrowAddress}`);

        return {
            escrowAddress,
            contestId,
            totalPrizeValue: "0", // –ü—Ä–æ–º–æ-–ø—Ä–∏–∑—ã –Ω–µ –∏–º–µ—é—Ç –¥–µ–Ω–µ–∂–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            receipt
        };
    }

    protected async finalizeContest(escrowAddress: string): Promise<FinalizeResult> {
        console.log("üéØ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–µ–Ω–µ–∂–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞...");

        // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const winners = [];
        for (let i = 0; i < Math.min(this.prizes.length, this.participants.length); i++) {
            winners.push(await this.participants[i].getAddress());
        }

        console.log("üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:");
        winners.forEach((winner, index) => {
            const place = index === 0 ? "ü•á" : index === 1 ? "ü•à" : "ü•â";
            const prizeDescription = this.getPrizeDescription(index);
            console.log(`  ${place} ${winner}: ${prizeDescription}`);
        });

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç —ç—Å–∫—Ä–æ—É
        const contestEscrow = await ethers.getContractAt("ContestEscrow", escrowAddress);

        // –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—É—Ä—Å
        const priorityCap = ethers.parseUnits("20", "gwei"); // 20 gwei priority fee cap
        const tx = await contestEscrow
            .connect(this.creator)
            .finalize(winners, priorityCap);

        const receipt = await tx.wait();
        console.log("‚úÖ –ö–æ–Ω–∫—É—Ä—Å —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        console.log(`‚õΩ –ì–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: ${receipt.gasUsed.toString()}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ receipt –∏ logs
        if (!receipt || !receipt.logs) {
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω–∫—É—Ä—Å–∞");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤—ã–¥–∞—á–∏ –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–æ–≤
        const promoEvents = receipt.logs.filter((log: any) => {
            try {
                const parsed = contestEscrow.interface.parseLog(log);
                return parsed?.name === "PromoPrizeIssued";
            } catch {
                return false;
            }
        });

        console.log(`üéÅ –í—ã–¥–∞–Ω–æ –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–æ–≤: ${promoEvents.length}`);
        promoEvents.forEach((event: any, index: number) => {
            const parsed = contestEscrow.interface.parseLog(event);
            const slot = parsed.args.slot;
            const winner = parsed.args.to;
            const uri = parsed.args.uri;
            console.log(`  –ü—Ä–æ–º–æ-–ø—Ä–∏–∑ ${Number(slot) + 1}: ${winner}`);
            console.log(`    URI: ${uri}`);
        });

        return {
            winners,
            receipt
        };
    }

    private getPrizeDescription(index: number): string {
        switch (index) {
            case 0: return "–ó–æ–ª–æ—Ç–æ–µ —á–ª–µ–Ω—Å—Ç–≤–æ";
            case 1: return "–°–∫–∏–¥–∫–∞ 50%";
            case 2: return "–ë–æ–Ω—É—Å–Ω—ã–π –ø–∞–∫–µ—Ç";
            default: return "–ü—Ä–æ–º–æ-–ø—Ä–∏–∑";
        }
    }

    protected async buildResultDetails(
        contestResult: any,
        finalizeResult: any,
        creatorChanges?: any,
        gatewayChanges?: any,
        receipt?: TransactionReceipt
    ): Promise<ScenarioDetails> {
        return new ScenarioDetails(
            contestResult.contestId,
            this.prizes.length,
            "0", // –ü—Ä–æ–º–æ-–ø—Ä–∏–∑—ã –Ω–µ –∏–º–µ—é—Ç –¥–µ–Ω–µ–∂–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            "PROMO",
            "0", // –°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ —Ç—Ä–∞—Ç–∏—Ç –¥–µ–Ω—å–≥–∏ –Ω–∞ –ø—Ä–æ–º–æ-–ø—Ä–∏–∑—ã
            `${this.prizes.length} –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–æ–≤`, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–æ–≤
            "0", // Gateway –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é —Å –ø—Ä–æ–º–æ-–ø—Ä–∏–∑–æ–≤
            receipt ? receipt.gasUsed.toString() : "0"
        );
    }

    protected async analyzeCommissions(
        creatorChanges: any,
        gatewayChanges: any,
        totalPrizeValue: string
    ): Promise<void> {
        console.log("\nüí∏ –ê–ù–ê–õ–ò–ó –ö–û–ú–ò–°–°–ò–ô:");
        console.log("=".repeat(40));
        console.log("üéÅ –ü—Ä–æ–º–æ-–∫–æ–Ω–∫—É—Ä—Å: –∫–æ–º–∏—Å—Å–∏–∏ –Ω–µ –≤–∑–∏–º–∞—é—Ç—Å—è");
        console.log("üí∞ –î–µ–Ω–µ–∂–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç");
        console.log("‚õΩ –ó–∞—Ç—Ä–∞—Ç—ã: —Ç–æ–ª—å–∫–æ –≥–∞–∑ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π");

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≥–∞–∑–æ–≤—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã
        for (const tokenAddress of this.getTokenAddresses()) {
            const tokenSymbol = tokenAddress === ethers.ZeroAddress ? "ETH" : "TEST";

            const creatorChange = creatorChanges?.changes?.find((c: any) => c.token === tokenAddress);

            if (creatorChange && Number(creatorChange.change) < 0) {
                console.log(`\nü™ô ${tokenSymbol} (—Ç–æ–ª—å–∫–æ –≥–∞–∑):`);
                console.log(`  –°–æ–∑–¥–∞—Ç–µ–ª—å –ø–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ –≥–∞–∑: ${ethers.formatEther(Math.abs(Number(creatorChange.change)))} ${tokenSymbol}`);
            }
        }
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–µ–¥–µ–Ω–µ–∂–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
 */
export async function testPromoContest(
    deployment: DeploymentResult,
    creator: Signer,
    participants: Signer[]
): Promise<ScenarioResult> {
    const scenario = new PromoContestScenario(deployment, creator, participants);
    return await scenario.execute();
}
