import { ethers } from "hardhat";
import { Contract } from "ethers";
import { deployMarketplaceContracts, deployTestToken } from "./deployment";
import * as fs from "fs";
import * as path from "path";

// In-memory cache for deployment addresses to eliminate JSON file dependency
let deploymentCache: any = null;

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è
 */
export interface DeploymentResult {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
    core: Contract;
    registry: Contract;
    tokenFilter: Contract;
    feeProcessor: Contract;
    orchestrator: Contract;
    gateway: Contract;
    marketplace: Contract;
    moduleId: string;

    // –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
    testToken: Contract;

    // –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω–∫—É—Ä—Å–æ–≤
    contestFactory: Contract;
    contestValidator: Contract;
    feeManager: Contract;
    tokenValidator: Contract;

    // –ê–¥—Ä–µ—Å–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    addresses: {
        core: string;
        registry: string;
        tokenFilter: string;
        feeProcessor: string;
        orchestrator: string;
        gateway: string;
        marketplace: string;
        testToken: string;
        contestFactory: string;
        contestValidator: string;
        feeManager: string;
        tokenValidator: string;
    };
}

/**
 * –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
 */
export async function deployAll(): Promise<DeploymentResult> {
    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π –¥–ª—è –¥–µ–º–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...");
    console.log("=".repeat(60));

    // 1. –î–µ–ø–ª–æ–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
    const contracts = await deployMarketplaceContracts();

    console.log("\n" + "=".repeat(60));

    // 2. –î–µ–ø–ª–æ–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    const testToken = await deployTestToken("DemoToken", "DEMO");

    // 3. –î–µ–ø–ª–æ–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω–∫—É—Ä—Å–æ–≤
    console.log("\nüèÜ –î–µ–ø–ª–æ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω–∫—É—Ä—Å–æ–≤...");

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º PaymentGateway –∫–∞–∫ feeManager –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
    const feeManager = contracts.gateway;
    console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º PaymentGateway –∫–∞–∫ feeManager:", await feeManager.getAddress());

    // –î–µ–ø–ª–æ–∏–º ContestFactory
    console.log("1Ô∏è‚É£ –î–µ–ø–ª–æ–π ContestFactory...");
    const ContestFactory = await ethers.getContractFactory("ContestFactory");
    const contestFactory = await ContestFactory.deploy(await contracts.core.getAddress(), await feeManager.getAddress());
    await contestFactory.waitForDeployment();
    console.log("‚úÖ ContestFactory –∑–∞–¥–µ–ø–ª–æ–µ–Ω:", await contestFactory.getAddress());

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∫–æ–Ω–∫—É—Ä—Å–æ–≤
    console.log("2Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –∫–æ–Ω–∫—É—Ä—Å–æ–≤...");
    const CONTEST_ID = ethers.keccak256(ethers.toUtf8Bytes("Contest"));
    await contracts.core.registerFeature(CONTEST_ID, await contestFactory.getAddress(), 0);
    console.log("‚úÖ –ú–æ–¥—É–ª—å –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");

    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const tokenValidator = null;
    const contestValidator = null;

    // 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–∞ —Ç–æ–∫–µ–Ω–∞ –≤ TokenFilter –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    console.log("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ TokenFilter...");

    const nativeTokenAddress = ethers.ZeroAddress;
    const testTokenAddress = await testToken.getAddress();

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–∞ —Ç–æ–∫–µ–Ω–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏
    const allTokensConfigData = ethers.solidityPacked(
        ["address", "address"],
        [nativeTokenAddress, testTokenAddress]
    );

    await contracts.orchestrator.configureProcessor(contracts.moduleId, "TokenFilter", true, allTokensConfigData);
    console.log("‚úÖ –í—Å–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ TokenFilter:");
    console.log("  - –ù–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω (ETH):", nativeTokenAddress);
    console.log("  - –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω (DEMO):", testTokenAddress);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º FeeProcessor
    console.log("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FeeProcessor...");
    const feeConfigData = ethers.solidityPacked(["uint16"], [250]); // 2.5% –∫–æ–º–∏—Å—Å–∏—è
    await contracts.orchestrator.configureProcessor(contracts.moduleId, "FeeProcessor", true, feeConfigData);
    console.log("‚úÖ FeeProcessor –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –∫–æ–º–∏—Å—Å–∏–µ–π 2.5%");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
    console.log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤...");
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ isPairSupported (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        const tokenFilter = contracts.tokenFilter;
        const nativeSupported = await tokenFilter.isPairSupported(contracts.moduleId, nativeTokenAddress, nativeTokenAddress);
        const testSupported = await tokenFilter.isPairSupported(contracts.moduleId, testTokenAddress, testTokenAddress);

        console.log("  - –ù–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω —Ä–∞–∑—Ä–µ—à–µ–Ω:", nativeSupported ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç");
        console.log("  - –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Ä–∞–∑—Ä–µ—à–µ–Ω:", testSupported ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç");
    } catch (error) {
        console.log("  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–æ–∫–µ–Ω–æ–≤:", error instanceof Error ? error.message : String(error));
    }

    // 4. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å–∞
    const addresses = {
        core: await contracts.core.getAddress(),
        registry: await contracts.registry.getAddress(),
        tokenFilter: await contracts.tokenFilter.getAddress(),
        feeProcessor: await contracts.feeProcessor.getAddress(),
        orchestrator: await contracts.orchestrator.getAddress(),
        gateway: await contracts.gateway.getAddress(),
        marketplace: await contracts.marketplace.getAddress(),
        testToken: await testToken.getAddress(),
        contestFactory: contestFactory ? await contestFactory.getAddress() : ethers.ZeroAddress,
        contestValidator: contestValidator ? await contestValidator.getAddress() : ethers.ZeroAddress,
        feeManager: feeManager ? await feeManager.getAddress() : ethers.ZeroAddress,
        tokenValidator: tokenValidator ? await tokenValidator.getAddress() : ethers.ZeroAddress,
    };

    console.log("\nüìã –°–≤–æ–¥–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤:");
    console.log("  CoreSystem:", addresses.core);
    console.log("  ProcessorRegistry:", addresses.registry);
    console.log("  TokenFilterProcessor:", addresses.tokenFilter);
    console.log("  FeeProcessor:", addresses.feeProcessor);
    console.log("  PaymentOrchestrator:", addresses.orchestrator);
    console.log("  PaymentGateway:", addresses.gateway);
    console.log("  Marketplace:", addresses.marketplace);
    console.log("  TestToken:", addresses.testToken);
    console.log("  ContestFactory:", addresses.contestFactory);
    console.log("  ContestValidator:", addresses.contestValidator);
    console.log("  CoreFeeManager:", addresses.feeManager);
    console.log("  TokenValidator:", addresses.tokenValidator);

    console.log("\nüéâ –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
    console.log("=".repeat(60));

    return {
        ...contracts,
        testToken,
        contestFactory,
        contestValidator,
        feeManager,
        tokenValidator,
        addresses
    };
}


/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏–∑ –ø–∞–º—è—Ç–∏
 */
export async function loadDeploymentAddresses(
    filename: string = "deployment-addresses.json"
): Promise<any> {
    try {
        if (deploymentCache) {
            console.log(`üìÇ –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ø–∞–º—è—Ç–∏ (—É—Å—Ç—Ä–∞–Ω–µ–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç JSON —Ñ–∞–π–ª–æ–≤)`);
            console.log(`  –°–µ—Ç—å: ${deploymentCache.network} (Chain ID: ${deploymentCache.chainId})`);
            console.log(`  –í—Ä–µ–º—è –¥–µ–ø–ª–æ—è: ${deploymentCache.timestamp}`);

            return deploymentCache;
        } else {
            console.log(`‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –≤ –ø–∞–º—è—Ç–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –¥–µ–ø–ª–æ–π`);
            return null;
        }
    } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ –ø–∞–º—è—Ç–∏:`, error);
        return null;
    }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ —Ñ–∞–π–ª –∏ –∫—ç—à
 */
export async function saveDeploymentAddresses(deployment: DeploymentResult): Promise<void> {
    try {
        const network = await ethers.provider.getNetwork();

        const deploymentData = {
            timestamp: new Date().toISOString(),
            network: network.name,
            chainId: network.chainId.toString(),
            addresses: {
                core: await deployment.core.getAddress(),
                registry: await deployment.registry.getAddress(),
                tokenFilter: await deployment.tokenFilter.getAddress(),
                orchestrator: await deployment.orchestrator.getAddress(),
                gateway: await deployment.gateway.getAddress(),
                marketplace: await deployment.marketplace.getAddress(),
                testToken: await deployment.testToken.getAddress()
            },
            moduleId: deployment.moduleId
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –ø–∞–º—è—Ç–∏
        deploymentCache = deploymentData;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
        const filePath = path.join(__dirname, "..", "deployment-addresses.json");
        fs.writeFileSync(filePath, JSON.stringify(deploymentData, null, 2));

        console.log("üíæ –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:");
        console.log(`  üìÅ –§–∞–π–ª: ${filePath}`);
        console.log(`  üß† –ö—ç—à: –æ–±–Ω–æ–≤–ª–µ–Ω`);
        console.log(`  üåê –°–µ—Ç—å: ${deploymentData.network} (Chain ID: ${deploymentData.chainId})`);

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–æ–≤:", error);
        throw error;
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–∞–º
 */
export async function getContractsFromAddresses(addresses: any): Promise<Partial<DeploymentResult>> {
    console.log("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º...");

    const contracts: any = {};

    if (addresses.core) {
        contracts.core = await ethers.getContractAt("CoreSystem", addresses.core);
    }

    if (addresses.registry) {
        contracts.registry = await ethers.getContractAt("ProcessorRegistry", addresses.registry);
    }

    if (addresses.tokenFilter) {
        contracts.tokenFilter = await ethers.getContractAt("TokenFilterProcessor", addresses.tokenFilter);
    }

    if (addresses.orchestrator) {
        contracts.orchestrator = await ethers.getContractAt("PaymentOrchestrator", addresses.orchestrator);
    }

    if (addresses.gateway) {
        contracts.gateway = await ethers.getContractAt("PaymentGateway", addresses.gateway);
    }

    if (addresses.marketplace) {
        contracts.marketplace = await ethers.getContractAt("Marketplace", addresses.marketplace);
    }

    if (addresses.testToken) {
        contracts.testToken = await ethers.getContractAt("contracts/mocks/TestToken.sol:TestToken", addresses.testToken);
    }

    contracts.addresses = addresses;

    console.log("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã");
    return contracts;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–µ–ø–ª–æ—è
 */
export async function verifyDeployment(deployment: DeploymentResult): Promise<boolean> {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–µ–ø–ª–æ—è...");

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
        const coreAddress = await deployment.core.getAddress();
        const marketplaceAddress = await deployment.marketplace.getAddress();
        const tokenAddress = await deployment.testToken.getAddress();

        console.log("‚úÖ –í—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã");
        console.log(`  CoreSystem: ${coreAddress}`);
        console.log(`  Marketplace: ${marketplaceAddress}`);
        console.log(`  TestToken: ${tokenAddress}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —É –¥–µ–ø–ª–æ–µ—Ä–∞
        const [deployer] = await ethers.getSigners();
        const balance = await deployment.testToken.balanceOf(deployer.address);
        console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —É –¥–µ–ø–ª–æ–µ—Ä–∞: ${ethers.formatEther(balance)} DEMO`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ marketplace –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏)
        const marketplaceAddr = await deployment.marketplace.getAddress();
        if (!marketplaceAddr || marketplaceAddr === ethers.ZeroAddress) {
            throw new Error("Marketplace –∞–¥—Ä–µ—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω");
        }

        console.log("‚úÖ –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã");
        return true;
    } catch (error) {
        console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–ø–ª–æ—è:", error);
        return false;
    }
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–µ–ø–ª–æ—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
 */
export async function getOrDeployContracts(
    forceRedeploy: boolean = false,
    saveAddresses: boolean = true
): Promise<DeploymentResult> {
    if (!forceRedeploy) {
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–¥—Ä–µ—Å–∞
        const savedAddresses = await loadDeploymentAddresses();

        if (savedAddresses && savedAddresses.addresses) {
            console.log("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã...");
            const contracts = await getContractsFromAddresses(savedAddresses.addresses);

            if (contracts.marketplace && contracts.testToken) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
                try {
                    await contracts.marketplace.getAddress();
                    console.log("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç");
                    return contracts as DeploymentResult;
                } catch (error) {
                    console.log("‚ö†Ô∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–π –¥–µ–ø–ª–æ–π");
                }
            }
        }
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–π –¥–µ–ø–ª–æ–π
    console.log("üÜï –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–π –¥–µ–ø–ª–æ–π...");
    const deployment = await deployAll();

    if (saveAddresses) {
        await saveDeploymentAddresses(deployment);
    }

    return deployment;
}
