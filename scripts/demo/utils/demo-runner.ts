/**
 * –û–±—â–∏–π —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π
 * –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –¥–µ–º–æ-—Å–∫—Ä–∏–ø—Ç–∞–º–∏
 */

import { ethers } from "hardhat";
import { Signer } from "ethers";

export interface ScenarioResult {
    name: string;
    success: boolean;
    error?: string;
    details?: {
        gasUsed?: string | number | bigint;
        gatewayEarned?: string | number | bigint;
        [key: string]: any;
    };
}

export interface DemoConfig {
    title: string;
    signerRoles: string[];
    contractsSection: string;
    scenariosSection: string;
    successMessage: string;
    contractPaths: string;
    testPaths: string;
    scenarioPaths: string;
    individualScenarios: string[];
}

export interface DeploymentResult {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
    core: any;
    registry: any;
    tokenFilter: any;
    feeProcessor: any;
    orchestrator: any;
    gateway: any;
    marketplace: any;
    moduleId: string;

    // –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
    testToken: any;

    // –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω–∫—É—Ä—Å–æ–≤
    contestFactory: any;
    contestValidator: any;
    feeManager: any;
    tokenValidator: any;

    // –ê–¥—Ä–µ—Å–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    addresses: {
        core: string;
        registry: string;
        tokenFilter: string;
        feeProcessor: string;
        orchestrator: string;
        gateway: string;
        marketplace: string;
        testToken: string;
        contestFactory: string;
        contestValidator: string;
        feeManager: string;
        tokenValidator: string;
    };

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç–∏
    [key: string]: any;
}

export class DemoRunner {
    private config: DemoConfig;
    private signers: Signer[] = [];
    private network: any;
    private startTime: number = 0;

    constructor(config: DemoConfig) {
        this.config = config;
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
     */
    async run(
        deployFunction: () => Promise<DeploymentResult>,
        scenariosFunction: (deployment: DeploymentResult) => Promise<ScenarioResult[]>
    ): Promise<void> {
        this.startTime = Date.now();

        this.printHeader();

        try {
            await this.initializeNetwork();
            await this.displayNetworkInfo();
            await this.checkBalances();

            const deployment = await this.runDeployment(deployFunction);
            const results = await this.runScenarios(scenariosFunction, deployment);

            this.displayFinalStatistics(results);
            this.displayAdditionalInfo();
            this.printFooter();

        } catch (error: any) {
            this.handleError(error);
        }
    }

    private printHeader(): void {
        console.log(`üé¨ ${this.config.title}`);
        console.log("=".repeat(80));
        console.log("üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:", new Date().toLocaleString());
    }

    private async initializeNetwork(): Promise<void> {
        this.signers = await ethers.getSigners();
        this.network = await ethers.provider.getNetwork();
        console.log("üåê –°–µ—Ç—å:", this.network.name || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ");
    }

    private async displayNetworkInfo(): Promise<void> {
        console.log("\nüîß –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ï–¢–ò –ò –ê–ö–ö–ê–£–ù–¢–ê–•:");
        console.log("-".repeat(50));
        console.log("üåê –°–µ—Ç—å:", this.network.name, `(Chain ID: ${this.network.chainId})`);

        for (let i = 0; i < Math.min(this.signers.length, this.config.signerRoles.length); i++) {
            const roleIcon = this.getRoleIcon(this.config.signerRoles[i]);
            console.log(`${roleIcon} ${this.config.signerRoles[i]}:`, await this.signers[i].getAddress());
        }
    }

    private getRoleIcon(role: string): string {
        const icons: { [key: string]: string } = {
            '–î–µ–ø–ª–æ–µ—Ä': 'üë§',
            '–ü—Ä–æ–¥–∞–≤–µ—Ü': 'üè™',
            '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å': 'üë•',
            '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä': 'üèÜ',
            '–£—á–∞—Å—Ç–Ω–∏–∫ 1': 'üë•',
            '–£—á–∞—Å—Ç–Ω–∏–∫ 2': 'üë•',
            '–ú–µ—Ä—á–∞–Ω—Ç': 'üè™',
            '–ü–æ–¥–ø–∏—Å—á–∏–∫': 'üë•'
        };
        return icons[role] || 'üë§';
    }

    private async checkBalances(): Promise<void> {
        console.log("\nüí∞ –ù–ê–ß–ê–õ–¨–ù–´–ï –ë–ê–õ–ê–ù–°–´:");
        console.log("-".repeat(50));

        const balances: bigint[] = [];
        for (let i = 0; i < Math.min(this.signers.length, this.config.signerRoles.length); i++) {
            const balance = await ethers.provider.getBalance(this.signers[i].address);
            balances.push(balance);
            const roleIcon = this.getRoleIcon(this.config.signerRoles[i]);
            console.log(`${roleIcon} ${this.config.signerRoles[i]}:`, ethers.formatEther(balance), "ETH");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
        const minBalance = ethers.parseEther("1.0");
        const lowBalances = balances.some(balance => balance < minBalance);

        if (lowBalances) {
            console.log("\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–∏–∑–∫–∏–µ –±–∞–ª–∞–Ω—Å—ã!");
            console.log("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–º–µ—Ç—å –º–∏–Ω–∏–º—É–º 1 ETH –Ω–∞ –∫–∞–∂–¥–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ");
            console.log("   –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: npx hardhat node");
        }
    }

    private async runDeployment(deployFunction: () => Promise<DeploymentResult>): Promise<DeploymentResult> {
        console.log(`\nüì¶ ${this.config.contractsSection}:`);
        console.log("=".repeat(80));

        const startDeployTime = Date.now();
        const deployment = await deployFunction();
        const deployTime = Date.now() - startDeployTime;

        console.log("\n‚úÖ –î–ï–ü–õ–û–ô –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!");
        console.log("-".repeat(50));
        console.log("‚è±Ô∏è –í—Ä–µ–º—è –¥–µ–ø–ª–æ—è:", deployTime, "ms");

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
        if (deployment.core) {
            console.log("üìã Core System:", await deployment.core.getAddress());
        }
        if (deployment.gateway) {
            console.log("üö™ Payment Gateway:", await deployment.gateway.getAddress());
        }
        if (deployment.testToken) {
            console.log("ü™ô Test Token:", await deployment.testToken.getAddress());
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
        for (const [key, contract] of Object.entries(deployment)) {
            if (key !== 'core' && key !== 'gateway' && key !== 'testToken' && key !== 'moduleId') {
                if (contract && typeof contract.getAddress === 'function') {
                    console.log(`üìã ${key}:`, await contract.getAddress());
                } else if (typeof contract === 'string' && key === 'moduleId') {
                    console.log(`üÜî Module ID:`, contract);
                }
            }
        }

        return deployment;
    }

    private async runScenarios(
        scenariosFunction: (deployment: DeploymentResult) => Promise<ScenarioResult[]>,
        deployment: DeploymentResult
    ): Promise<ScenarioResult[]> {
        console.log(`\nüéØ ${this.config.scenariosSection}:`);
        console.log("=".repeat(80));

        const startScenariosTime = Date.now();
        const results = await scenariosFunction(deployment);
        const scenariosTime = Date.now() - startScenariosTime;

        return results;
    }

    private displayFinalStatistics(results: ScenarioResult[]): void {
        console.log("\nüìà –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:");
        console.log("=".repeat(80));

        const successCount = results.filter(r => r.success).length;
        const failureCount = results.length - successCount;
        const scenariosTime = Date.now() - this.startTime;

        console.log("üìä –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:");
        console.log(`  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${successCount}/${results.length}`);
        console.log(`  ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${failureCount}/${results.length}`);
        console.log(`  üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((successCount / results.length) * 100)}%`);
        console.log(`  ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${scenariosTime}ms`);
        console.log(`  ‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å—Ü–µ–Ω–∞—Ä–∏–π: ${Math.round(scenariosTime / results.length)}ms`);

        // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–∞–∑—É
        this.displayGasStatistics(results, successCount);

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (successCount === results.length) {
            console.log("\nüéâ –í–°–ï –°–¶–ï–ù–ê–†–ò–ò –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!");
            console.log(`‚ú® ${this.config.successMessage}`);
            console.log("üöÄ –ì–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ");
        } else {
            console.log("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –°–¶–ï–ù–ê–†–ò–ò –ó–ê–í–ï–†–®–ò–õ–ò–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò");
            console.log("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π");

            const failedScenarios = results.filter(r => !r.success);
            console.log("\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:");
            failedScenarios.forEach((scenario, index) => {
                console.log(`  ${index + 1}. ${scenario.name}: ${scenario.error}`);
            });
        }
    }

    private displayGasStatistics(results: ScenarioResult[], successCount: number): void {
        let totalGasUsed = 0n;
        let totalFeesCollected = 0n;

        results.forEach(result => {
            if (result.success && result.details?.gasUsed) {
                try {
                    const gasUsed = typeof result.details.gasUsed === 'string' 
                        ? result.details.gasUsed 
                        : result.details.gasUsed.toString();
                    totalGasUsed += BigInt(gasUsed);
                } catch (e) {
                    // Ignore parsing errors for gas usage
                }
            }
            if (result.success && result.details?.gatewayEarned) {
                try {
                    totalFeesCollected += BigInt(result.details.gatewayEarned);
                } catch (e) {
                    // Ignore parsing errors for fee collection
                }
            }
        });

        if (totalGasUsed > 0n) {
            console.log(`  ‚õΩ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ –≥–∞–∑–∞: ${totalGasUsed.toString()}`);
            if (successCount > 0) {
                console.log(`  üí∞ –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ –≥–∞–∑–∞: ${(totalGasUsed / BigInt(successCount)).toString()}`);
            }
        }

        if (totalFeesCollected > 0n) {
            console.log(`  üèõÔ∏è –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ —Å–æ–±—Ä–∞–Ω—ã: ${ethers.formatEther(totalFeesCollected)} ETH`);
        }
    }

    private displayAdditionalInfo(): void {
        console.log("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:");
        this.config.individualScenarios.forEach(scenario => {
            console.log(`  ‚Ä¢ ${scenario}`);
        });

        console.log("\nüìö –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:");
        console.log("-".repeat(50));
        console.log("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README.md");
        console.log("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: hardhat.config.ts");
        console.log(`üìÅ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã: ${this.config.contractPaths}`);
        console.log(`üß™ –¢–µ—Å—Ç—ã: ${this.config.testPaths}`);
        console.log(`üìã –°—Ü–µ–Ω–∞—Ä–∏–∏: ${this.config.scenarioPaths}`);
    }

    private printFooter(): void {
        console.log("\nüèÅ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê");
        console.log("=".repeat(80));
        console.log("üìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:", new Date().toLocaleString());
        console.log("‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", Date.now() - this.startTime, "ms");
    }

    private handleError(error: any): void {
        console.log("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò:");
        console.log("=".repeat(80));
        console.log("üö® –û—à–∏–±–∫–∞:", error.message);

        if (error.stack) {
            console.log("\nüìã Stack trace:");
            console.log(error.stack);
        }

        console.log("\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –†–ï–®–ï–ù–ò–Ø:");
        console.log("-".repeat(50));
        console.log("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å –∑–∞–ø—É—â–µ–Ω–∞: npx hardhat node");
        console.log("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤");
        console.log("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: npm install");
        console.log("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ç–∏ –≤ hardhat.config.ts");
        console.log("5. –û—á–∏—Å—Ç–∏—Ç–µ –∫–µ—à: npx hardhat clean");

        process.exit(1);
    }
}
