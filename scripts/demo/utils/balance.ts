import {ethers} from "hardhat";
import {Contract, Signer} from "ethers";

// Mock token cache no longer needed since we use real ERC20 contracts

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ (–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ ERC20)
 */
export async function getBalance(address: string, token: string): Promise<bigint> {
    if (token === ethers.ZeroAddress) {
        return await ethers.provider.getBalance(address);
    }

    const tokenContract = await ethers.getContractAt("IERC20", token);
    return await tokenContract.balanceOf(address);
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 */
export async function getFormattedBalance(address: string, token: string, symbol: string = "ETH"): Promise<string> {
    const balance = await getBalance(address, token);
    return `${ethers.formatEther(balance)} ${symbol}`;
}

/**
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–∞—Ö
 */
export interface BalanceInfo {
    address: string;
    nativeBalance: bigint;
    tokenBalances: Map<string, bigint>;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
 */
export async function getAccountBalances(
    address: string,
    tokens: string[] = []
): Promise<BalanceInfo> {
    console.log(`üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è ${address}...`);

    const nativeBalance = await ethers.provider.getBalance(address);
    const tokenBalances = new Map<string, bigint>();

    for (const tokenAddress of tokens) {
        if (tokenAddress !== ethers.ZeroAddress) {
            try {
                const balance = await getBalance(address, tokenAddress);
                tokenBalances.set(tokenAddress, balance);
            } catch (error) {
                console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞ ${tokenAddress}:`, error);
                tokenBalances.set(tokenAddress, 0n);
            }
        }
    }

    return {
        address,
        nativeBalance,
        tokenBalances
    };
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–∞—Ö –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
 */
export async function getMultipleAccountBalances(
    addresses: string[],
    tokens: string[] = []
): Promise<BalanceInfo[]> {
    console.log(`üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è ${addresses.join(',')}...`);

    const balances: BalanceInfo[] = [];

    for (const address of addresses) {
        const balance = await getAccountBalances(address, tokens);
        balances.push(balance);
    }

    return balances;
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª–∏
 */
export async function displayBalances(
    balanceInfo: BalanceInfo,
    tokenSymbols: Map<string, string> = new Map()
): Promise<void> {
    console.log(`üí≥ –ë–∞–ª–∞–Ω—Å—ã –¥–ª—è ${balanceInfo.address}:`);
    console.log(`  Native ETH: ${ethers.formatEther(balanceInfo.nativeBalance)} ETH`);

    for (const [tokenAddress, balance] of balanceInfo.tokenBalances) {
        const symbol = tokenSymbols.get(tokenAddress) || "TOKEN";
        console.log(`  ${symbol}: ${ethers.formatEther(balance)} ${symbol}`);
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª–∏
 */
export async function displayMultipleBalances(
    balanceInfos: BalanceInfo[],
    tokenSymbols: Map<string, string> = new Map()
): Promise<void> {
    for (const balanceInfo of balanceInfos) {
        await displayBalances(balanceInfo, tokenSymbols);
    }
}

/**
 * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–æ –∏ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export interface BalanceChange {
    address: string;
    nativeChange: bigint;
    tokenChanges: Map<string, bigint>;
}

export function calculateBalanceChanges(
    before: BalanceInfo,
    after: BalanceInfo
): BalanceChange {
    const nativeChange = after.nativeBalance - before.nativeBalance;
    const tokenChanges = new Map<string, bigint>();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–æ–∫–µ–Ω–∞—Ö
    for (const [tokenAddress, afterBalance] of after.tokenBalances) {
        const beforeBalance = before.tokenBalances.get(tokenAddress) || 0n;
        const change = afterBalance - beforeBalance;
        tokenChanges.set(tokenAddress, change);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ before, –Ω–æ –Ω–µ—Ç –≤ after
    for (const [tokenAddress, beforeBalance] of before.tokenBalances) {
        if (!after.tokenBalances.has(tokenAddress)) {
            tokenChanges.set(tokenAddress, -beforeBalance);
        }
    }

    return {
        address: before.address,
        nativeChange,
        tokenChanges
    };
}

/**
 * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
 */
export function calculateMultipleBalanceChanges(
    before: BalanceInfo[],
    after: BalanceInfo[]
): BalanceChange[] {
    const changes: BalanceChange[] = [];

    for (let i = 0; i < before.length && i < after.length; i++) {
        const change = calculateBalanceChanges(before[i], after[i]);
        changes.push(change);
    }

    return changes;
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–æ–≤
 */
export function displayBalanceChanges(
    changes: BalanceChange,
    tokenSymbols: Map<string, string> = new Map()
): void {
    console.log(`üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è ${changes.address}:`);

    const nativeChangeStr = changes.nativeChange >= 0 ? "+" : "";
    console.log(`  Native ETH: ${nativeChangeStr}${ethers.formatEther(changes.nativeChange)} ETH`);

    for (const [tokenAddress, change] of changes.tokenChanges) {
        const symbol = tokenSymbols.get(tokenAddress) || "TOKEN";
        const changeStr = change >= 0 ? "+" : "";
        console.log(`  ${symbol}: ${changeStr}${ethers.formatEther(change)} ${symbol}`);
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
 */
export function displayMultipleBalanceChanges(
    changes: BalanceChange[],
    tokenSymbols: Map<string, string> = new Map()
): void {
    for (const change of changes) {
        displayBalanceChanges(change, tokenSymbols);
    }
}

/**
 * –ú–∏–Ω—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export async function mintTokens(
  token: Contract,
  recipient: string,
  amount: bigint
): Promise<void> {
  console.log(`ü™ô –ú–∏–Ω—Ç ${ethers.formatEther(amount)} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è ${recipient}...`);

  try {
    const tx = await token.mint(recipient, amount);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Ç–æ–¥ wait (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å mock —Ç–æ–∫–µ–Ω–∞–º–∏)
    if (tx && typeof tx.wait === 'function') {
      await tx.wait();
    }

    console.log("‚úÖ –¢–æ–∫–µ–Ω—ã –∑–∞–º–∏–Ω—á–µ–Ω—ã");
  } catch (error) {
    console.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∏–Ω—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤:", error);
    throw error;
  }
}

/**
 * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–º–∏–Ω—Ç –∏ approve)
 */
export async function prepareTokensForTesting(
  token: Contract,
  user: Signer,
  spender: string,
  amount: bigint
): Promise<void> {
  const userAddress = await user.getAddress();

  // –ú–∏–Ω—Ç–∏–º —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  await mintTokens(token, userAddress, amount);

  // –î–∞–µ–º approve spender'—É
  console.log(`‚úÖ –í—ã–¥–∞—á–∞ approve –Ω–∞ ${ethers.formatEther(amount)} —Ç–æ–∫–µ–Ω–æ–≤...`);
  const erc20Token = await ethers.getContractAt("IERC20", await token.getAddress());
  const tx = await erc20Token.connect(user).approve(spender, amount);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Ç–æ–¥ wait (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å mock —Ç–æ–∫–µ–Ω–∞–º–∏)
  if (tx && typeof tx.wait === 'function') {
    await tx.wait();
  }

  console.log("‚úÖ Approve –≤—ã–¥–∞–Ω");
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∏—Å—Å–∏–π –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
export interface FeeInfo {
    totalFee: bigint;
    platformFee: bigint;
    processingFee: bigint;
    recipient: string;
}

/**
 * –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π –∏–∑ —Å–æ–±—ã—Ç–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
export async function analyzeFees(
    receipt: any,
    marketplace: Contract
): Promise<FeeInfo[]> {
    console.log("üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...");

    const fees: FeeInfo[] = [];

    if (!receipt || !receipt.logs) {
        console.log("‚ö†Ô∏è –ù–µ—Ç –ª–æ–≥–æ–≤ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
        return fees;
    }

    // –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–º–∏—Å—Å–∏—è–º–∏
    for (const log of receipt.logs) {
        try {
            const parsedLog = marketplace.interface.parseLog(log);

            if (parsedLog && parsedLog.name === "FeePaid") {
                // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏–µ FeePaid
                fees.push({
                    totalFee: parsedLog.args.amount,
                    platformFee: parsedLog.args.platformFee || 0n,
                    processingFee: parsedLog.args.processingFee || 0n,
                    recipient: parsedLog.args.recipient
                });
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ –æ—Ç –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        }
    }

    if (fees.length === 0) {
        console.log("‚ÑπÔ∏è –ö–æ–º–∏—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
    } else {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${fees.length} –∫–æ–º–∏—Å—Å–∏–π`);
        fees.forEach((fee, index) => {
            console.log(`  –ö–æ–º–∏—Å—Å–∏—è ${index + 1}:`);
            console.log(`    –û–±—â–∞—è —Å—É–º–º–∞: ${ethers.formatEther(fee.totalFee)} ETH`);
            console.log(`    –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${fee.recipient}`);
        });
    }

    return fees;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function checkSufficientBalance(
    user: string,
    token: string,
    requiredAmount: bigint
): Promise<boolean> {
    const balance = await getBalance(user, token);
    const sufficient = balance >= requiredAmount;

    const tokenName = token === ethers.ZeroAddress ? "Native ETH" : token;
    console.log(`üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ ${tokenName}:`);
    console.log(`  –¢–µ–∫—É—â–∏–π: ${ethers.formatEther(balance)}`);
    console.log(`  –¢—Ä–µ–±—É–µ—Ç—Å—è: ${ethers.formatEther(requiredAmount)}`);
    console.log(`  –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ: ${sufficient ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç"}`);

    return sufficient;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –≥–∞–∑–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
export async function getGasPrice(): Promise<bigint> {
    const feeData = await ethers.provider.getFeeData();
    return feeData.gasPrice || 0n;
}

/**
 * –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–∞–∑–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
export async function estimateTransactionCost(
    contract: Contract,
    methodName: string,
    args: any[]
): Promise<bigint> {
    try {
        const gasEstimate = await contract[methodName].estimateGas(...args);
        const gasPrice = await getGasPrice();
        return gasEstimate * gasPrice;
    } catch (error) {
        console.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≥–∞–∑–∞:", error);
        return 0n;
    }
}
