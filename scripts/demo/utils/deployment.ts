import { ethers } from "hardhat";
import { Contract } from "ethers";

/**
 * –î–µ–ø–ª–æ–π –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
 * –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–ø–ª–æ—è:
 * 1. CoreSystem
 * 2. ProcessorRegistry
 * 3. TokenFilterProcessor (–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã)
 * 4. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –≤ registry
 * 5. PaymentOrchestrator
 * 6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –≤ orchestrator
 * 7. PaymentGateway
 * 8. Marketplace
 * 9. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –≤ CoreSystem
 */
export async function deployMarketplaceContracts(): Promise<{
    core: Contract;
    registry: Contract;
    tokenFilter: Contract;
    feeProcessor: Contract;
    orchestrator: Contract;
    gateway: Contract;
    marketplace: Contract;
    moduleId: string;
}> {
    const [deployer] = await ethers.getSigners();
    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞...");
    console.log("üë§ –î–µ–ø–ª–æ–µ—Ä:", deployer.address);

    // 1. –î–µ–ø–ª–æ–π CoreSystem
    console.log("1Ô∏è‚É£ –î–µ–ø–ª–æ–π CoreSystem...");
    const CoreSystem = await ethers.getContractFactory("CoreSystem");
    const core = await CoreSystem.deploy(deployer.address);
    await core.waitForDeployment();
    console.log("‚úÖ CoreSystem –∑–∞–¥–µ–ø–ª–æ–µ–Ω:", await core.getAddress());

    // –í—ã–¥–∞–µ–º —Ä–æ–ª—å FEATURE_OWNER_ROLE –¥–µ–ø–ª–æ–µ—Ä—É
    const featureOwner = await core.FEATURE_OWNER_ROLE();
    await core.grantRole(featureOwner, deployer.address);
    console.log("‚úÖ –†–æ–ª—å FEATURE_OWNER_ROLE –≤—ã–¥–∞–Ω–∞ –¥–µ–ø–ª–æ–µ—Ä—É");

    // 2. –î–µ–ø–ª–æ–π ProcessorRegistry
    console.log("2Ô∏è‚É£ –î–µ–ø–ª–æ–π ProcessorRegistry...");
    const ProcessorRegistry = await ethers.getContractFactory("ProcessorRegistry");
    const registry = await ProcessorRegistry.deploy();
    await registry.waitForDeployment();
    console.log("‚úÖ ProcessorRegistry –∑–∞–¥–µ–ø–ª–æ–µ–Ω:", await registry.getAddress());

    // 3. –î–µ–ø–ª–æ–π TokenFilterProcessor
    console.log("3Ô∏è‚É£ –î–µ–ø–ª–æ–π TokenFilterProcessor...");
    const TokenFilterProcessor = await ethers.getContractFactory("TokenFilterProcessor");
    const tokenFilter = await TokenFilterProcessor.deploy();
    await tokenFilter.waitForDeployment();
    console.log("‚úÖ TokenFilterProcessor –∑–∞–¥–µ–ø–ª–æ–µ–Ω:", await tokenFilter.getAddress());

    // 4. –î–µ–ø–ª–æ–π FeeProcessor
    console.log("4Ô∏è‚É£ –î–µ–ø–ª–æ–π FeeProcessor...");
    const FeeProcessor = await ethers.getContractFactory("FeeProcessor");
    const feeProcessor = await FeeProcessor.deploy(250); // 2.5% –∫–æ–º–∏—Å—Å–∏—è (250 –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤)
    await feeProcessor.waitForDeployment();
    console.log("‚úÖ FeeProcessor –∑–∞–¥–µ–ø–ª–æ–µ–Ω:", await feeProcessor.getAddress());

    // 5. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –≤ registry
    console.log("5Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –≤ registry...");
    await registry.registerProcessor(await tokenFilter.getAddress(), 0);
    console.log("‚úÖ TokenFilterProcessor –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ registry");
    await registry.registerProcessor(await feeProcessor.getAddress(), 1);
    console.log("‚úÖ FeeProcessor –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ registry");

    // 6. –î–µ–ø–ª–æ–π PaymentOrchestrator
    console.log("6Ô∏è‚É£ –î–µ–ø–ª–æ–π PaymentOrchestrator...");
    const PaymentOrchestrator = await ethers.getContractFactory("PaymentOrchestrator");
    const orchestrator = await PaymentOrchestrator.deploy(await registry.getAddress());
    await orchestrator.waitForDeployment();
    console.log("‚úÖ PaymentOrchestrator –∑–∞–¥–µ–ø–ª–æ–µ–Ω:", await orchestrator.getAddress());

    // 7. –î–µ–ø–ª–æ–π PaymentGateway
    console.log("7Ô∏è‚É£ –î–µ–ø–ª–æ–π PaymentGateway...");
    const PaymentGateway = await ethers.getContractFactory("PaymentGateway");
    const gateway = await PaymentGateway.deploy(await orchestrator.getAddress());
    await gateway.waitForDeployment();
    console.log("‚úÖ PaymentGateway –∑–∞–¥–µ–ø–ª–æ–µ–Ω:", await gateway.getAddress());

    // 8. –î–µ–ø–ª–æ–π Marketplace
    console.log("8Ô∏è‚É£ –î–µ–ø–ª–æ–π Marketplace...");
    const Marketplace = await ethers.getContractFactory("Marketplace");
    const moduleId = ethers.keccak256(ethers.toUtf8Bytes("Marketplace"));
    const marketplace = await Marketplace.deploy(await core.getAddress(), await gateway.getAddress(), moduleId);
    await marketplace.waitForDeployment();
    console.log("‚úÖ Marketplace –∑–∞–¥–µ–ø–ª–æ–µ–Ω:", await marketplace.getAddress());
    console.log("üìã Module ID:", moduleId);

    // 9. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –≤ CoreSystem
    console.log("9Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –≤ CoreSystem...");
    await core.registerFeature(moduleId, await marketplace.getAddress(), 1);
    await core.setService(moduleId, "PaymentGateway", await gateway.getAddress());
    console.log("‚úÖ –ú–æ–¥—É–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ CoreSystem");

    // üîü –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    console.log("üîü –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤...");

    // –í—ã–¥–∞–µ–º —Ä–æ–ª—å PROCESSOR_ADMIN_ROLE orchestrator'—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
    const processorAdminRole = await tokenFilter.PROCESSOR_ADMIN_ROLE();
    await tokenFilter.grantRole(processorAdminRole, await orchestrator.getAddress());
    console.log("‚úÖ –†–æ–ª—å PROCESSOR_ADMIN_ROLE –≤—ã–¥–∞–Ω–∞ orchestrator'—É –¥–ª—è TokenFilter");

    const feeProcessorAdminRole = await feeProcessor.PROCESSOR_ADMIN_ROLE();
    await feeProcessor.grantRole(feeProcessorAdminRole, await orchestrator.getAddress());
    console.log("‚úÖ –†–æ–ª—å PROCESSOR_ADMIN_ROLE –≤—ã–¥–∞–Ω–∞ orchestrator'—É –¥–ª—è FeeProcessor");
    console.log("‚ÑπÔ∏è –í—Å–µ —Ç–æ–∫–µ–Ω—ã –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–æ–∑–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–ª–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è");

    console.log("üéâ –í—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–µ–ø–ª–æ–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!");

    return {
        core,
        registry,
        tokenFilter,
        feeProcessor,
        orchestrator,
        gateway,
        marketplace,
        moduleId
    };
}

/**
 * –î–µ–ø–ª–æ–π —Ç–µ—Å—Ç–æ–≤–æ–≥–æ ERC20 —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –¥–µ–º–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
 * –î–µ–ø–ª–æ–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–π ERC20 –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å SafeERC20
 */
export async function deployTestToken(name: string = "TestToken", symbol: string = "TEST"): Promise<Contract> {
    console.log(`ü™ô –î–µ–ø–ª–æ–π —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ ${name} (${symbol})...`);

    const [deployer] = await ethers.getSigners();

    // –î–µ–ø–ª–æ–∏–º —Ä–µ–∞–ª—å–Ω—ã–π ERC20 –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    const TestTokenFactory = await ethers.getContractFactory("contracts/mocks/TestToken.sol:TestToken");
    const initialSupply = ethers.parseEther("1000000");

    const testToken = await TestTokenFactory.deploy(
        name,
        symbol,
        18, // decimals
        initialSupply
    );

    await testToken.waitForDeployment();
    const tokenAddress = await testToken.getAddress();

    console.log(`‚úÖ ${name} —Ç–æ–∫–µ–Ω –∑–∞–¥–µ–ø–ª–æ–µ–Ω: ${tokenAddress}`);
    console.log(`‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å: ${ethers.formatEther(initialSupply)} ${symbol} —Ç–æ–∫–µ–Ω–æ–≤`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–µ–ø–ª–æ–µ—Ä–∞
    const deployerBalance = await testToken.balanceOf(deployer.address);
    console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –¥–µ–ø–ª–æ–µ—Ä–∞: ${ethers.formatEther(deployerBalance)} ${symbol}`);

    return testToken;
}
