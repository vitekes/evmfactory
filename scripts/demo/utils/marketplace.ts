import { ethers } from "hardhat";
import { Contract, Signer } from "ethers";

export interface Product {
  id: number;
  price: bigint;
  tokenAddress: string;
  /** Discount percent in basis points (10000 = 100%) */
  discount?: number;
}

export interface Listing {
  chainIds: bigint[];
  token: string;
  price: bigint;
  sku: string;
  seller: string;
  salt: number;
  expiry: number;
  discountPercent: number;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ
 */
export async function createListing(
  marketplace: Contract,
  seller: Signer,
  details: Product
): Promise<{ listing: Listing; signature: string }> {
  console.log("üìù –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–∞...");
  console.log("üõçÔ∏è –¢–æ–≤–∞—Ä ID:", details.id);
  console.log("üí∞ –¶–µ–Ω–∞:", ethers.formatEther(details.price), "ETH");
  console.log("üè™ –ü—Ä–æ–¥–∞–≤–µ—Ü:", await seller.getAddress());

  const network = await ethers.provider.getNetwork();
  const listing = {
    chainIds: [network.chainId],
    token: details.tokenAddress,
    price: details.price,
    sku: ethers.keccak256(ethers.toUtf8Bytes(details.id.toString())),
    seller: await seller.getAddress(),
    salt: Date.now(),
    expiry: 0,
    discountPercent: details.discount ?? 0,
  } as const;

  const domain = {
    chainId: network.chainId,
    verifyingContract: await marketplace.getAddress(),
  };

  const types = {
    Listing: [
      { name: "chainIds", type: "uint256[]" },
      { name: "token", type: "address" },
      { name: "price", type: "uint256" },
      { name: "sku", type: "bytes32" },
      { name: "seller", type: "address" },
      { name: "salt", type: "uint256" },
      { name: "expiry", type: "uint64" },
      { name: "discountPercent", type: "uint16" },
    ],
  };

  const signature = await seller.signTypedData(domain, types, listing);
  console.log("‚úÖ –õ–∏—Å—Ç–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥–ø–∏—Å–∞–Ω");

  return { listing, signature };
}

/**
 * –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ
 */
export async function purchaseListing(
  marketplace: Contract,
  buyer: Signer,
  listing: any,
  signature: string,
  paymentToken: string,
  gateway?: Contract
): Promise<any> {
  console.log("üõí –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞...");
  console.log("üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:", await buyer.getAddress());
  console.log("üí≥ –¢–æ–∫–µ–Ω –æ–ø–ª–∞—Ç—ã:", paymentToken === ethers.ZeroAddress ? "Native ETH" : paymentToken);

  // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ERC20 —Ç–æ–∫–µ–Ω, –Ω—É–∂–Ω–æ –¥–∞—Ç—å approve
  if (paymentToken !== ethers.ZeroAddress) {
    const token = await ethers.getContractAt("IERC20", paymentToken);
    const amount = await marketplace.getPriceInPreferredCurrency(listing, paymentToken);
    console.log("üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:", ethers.formatEther(amount), "—Ç–æ–∫–µ–Ω–æ–≤");

    // Approve –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–¥–∞–Ω PaymentGateway, –∞ –Ω–µ marketplace
    const approveTarget = gateway ? await gateway.getAddress() : await marketplace.getAddress();
    await token.connect(buyer).approve(approveTarget, amount);
    console.log("‚úÖ Approve –≤—ã–¥–∞–Ω –¥–ª—è ERC20 —Ç–æ–∫–µ–Ω–∞");
  }

  const price = listing.price;
  console.log("üí∞ –¶–µ–Ω–∞ –ª–∏—Å—Ç–∏–Ω–≥–∞:", ethers.formatEther(price), "ETH");

  const tx = await marketplace.connect(buyer).buy(listing, signature, paymentToken, price, {
    value: paymentToken === ethers.ZeroAddress ? price : 0n,
  });

  const receipt = await tx.wait();
  console.log("‚úÖ –ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", receipt?.hash);

  return receipt;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π
 */
export async function createDiscountedListing(
  marketplace: Contract,
  seller: Signer,
  productId: number,
  originalPrice: bigint,
  discountPercent: number,
  tokenAddress: string = ethers.ZeroAddress
): Promise<{ listing: Listing; signature: string }> {
  console.log("üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π...");
  console.log("üí∞ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:", ethers.formatEther(originalPrice), "ETH");
  console.log("üéØ –°–∫–∏–¥–∫–∞:", discountPercent / 100, "%");

  const discountedPrice = originalPrice - (originalPrice * BigInt(discountPercent)) / 10000n;
  console.log("üí∏ –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π:", ethers.formatEther(discountedPrice), "ETH");

  const product: Product = {
    id: productId,
    price: discountedPrice,
    tokenAddress,
    discount: discountPercent
  };

  return await createListing(marketplace, seller, product);
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏—Å—Ç–∏–Ω–≥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export async function createMultipleListings(
  marketplace: Contract,
  seller: Signer,
  count: number,
  basePrice: bigint = ethers.parseEther("0.1"),
  tokenAddress: string = ethers.ZeroAddress
): Promise<Array<{ listing: Listing; signature: string; productId: number }>> {
  console.log(`üì¶ –°–æ–∑–¥–∞–Ω–∏–µ ${count} –ª–∏—Å—Ç–∏–Ω–≥–æ–≤...`);

  const listings = [];

  for (let i = 1; i <= count; i++) {
    const product: Product = {
      id: i,
      price: basePrice * BigInt(i), // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ü–µ–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
      tokenAddress,
      discount: i % 3 === 0 ? 1000 : 0 // –ö–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π —Ç–æ–≤–∞—Ä —Å–æ —Å–∫–∏–¥–∫–æ–π 10%
    };

    const { listing, signature } = await createListing(marketplace, seller, product);
    listings.push({ listing, signature, productId: i });

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º –ª–∏—Å—Ç–∏–Ω–≥–æ–≤
    await new Promise(resolve => setTimeout(resolve, 100));
  }

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${count} –ª–∏—Å—Ç–∏–Ω–≥–æ–≤`);
  return listings;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Å—Ç–∏–Ω–≥–µ
 */
export async function getListingInfo(listing: Listing): Promise<void> {
  console.log("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Å—Ç–∏–Ω–≥–µ:");
  console.log("  üÜî SKU:", listing.sku);
  console.log("  üí∞ –¶–µ–Ω–∞:", ethers.formatEther(listing.price), "ETH");
  console.log("  ü™ô –¢–æ–∫–µ–Ω:", listing.token === ethers.ZeroAddress ? "Native ETH" : listing.token);
  console.log("  üè™ –ü—Ä–æ–¥–∞–≤–µ—Ü:", listing.seller);
  console.log("  üè∑Ô∏è –°–∫–∏–¥–∫–∞:", listing.discountPercent / 100, "%");
  console.log("  ‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:", listing.expiry === 0 ? "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" : new Date(listing.expiry * 1000));
}

/**
 * –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
 */
export function calculateFinalPrice(originalPrice: bigint, discountPercent: number): bigint {
  if (discountPercent === 0) return originalPrice;
  return originalPrice - (originalPrice * BigInt(discountPercent)) / 10000n;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ª–∏—Å—Ç–∏–Ω–≥–∞
 */
export async function validateListing(
  marketplace: Contract,
  listing: Listing,
  signature: string
): Promise<boolean> {
  try {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ª–∏—Å—Ç–∏–Ω–≥–∞
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å—å, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è, –∏ —Ç.–¥.
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ª–∏—Å—Ç–∏–Ω–≥–∞...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –∏—Å—Ç–µ–∫
    if (listing.expiry > 0 && listing.expiry < Math.floor(Date.now() / 1000)) {
      console.log("‚ùå –õ–∏—Å—Ç–∏–Ω–≥ –∏—Å—Ç–µ–∫");
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –±–æ–ª—å—à–µ 0
    if (listing.price <= 0) {
      console.log("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞");
      return false;
    }

    console.log("‚úÖ –õ–∏—Å—Ç–∏–Ω–≥ –≤–∞–ª–∏–¥–µ–Ω");
    return true;
  } catch (error) {
    console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏—Å—Ç–∏–Ω–≥–∞:", error);
    return false;
  }
}
