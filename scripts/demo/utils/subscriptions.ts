/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –¥–µ–ø–ª–æ—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫
 * 
 * –í—ã–Ω–µ—Å–µ–Ω—ã –∏–∑ scripts/demo/subscriptions/deployment.ts –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 * –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–º–æ-—Å—Ü–µ–Ω–∞—Ä–∏—è—Ö
 */

import { ethers } from "hardhat";
import { Signer, Contract } from "ethers";
import { getOrDeployContracts } from "./deploy";

export interface SubscriptionDeployment {
    core: Contract;
    gateway: Contract;
    subscriptionFactory: Contract;
    subscriptionManager: Contract;
    testToken: Contract;
    moduleId: string;
}

/**
 * –î–µ–ø–ª–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Ä–æ–ª–µ–π
 */
export async function deploySubscriptionContracts(): Promise<SubscriptionDeployment> {
    console.log("üöÄ –î–µ–ø–ª–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫...");

    const [deployer] = await ethers.getSigners();
    console.log("üë§ –î–µ–ø–ª–æ–µ—Ä:", deployer.address);

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
    const baseDeployment = await getOrDeployContracts();
    console.log("‚úÖ –ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã");

    // –í—ã—á–∏—Å–ª—è–µ–º SUBSCRIPTION_MODULE_ID
    const subscriptionModuleId = ethers.keccak256(ethers.toUtf8Bytes("SubscriptionManager"));
    console.log("üìã SUBSCRIPTION_MODULE_ID:", subscriptionModuleId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –ø–æ–¥–ø–∏—Å–æ–∫ –≤ CoreSystem
    console.log("üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ –≤ CoreSystem...");
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –º–æ–¥—É–ª—å
        await baseDeployment.core.getFeature(subscriptionModuleId);
        console.log("‚úÖ –ú–æ–¥—É–ª—å –ø–æ–¥–ø–∏—Å–æ–∫ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
    } catch {
        // –ú–æ–¥—É–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
        console.log("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è –ø–æ–¥–ø–∏—Å–æ–∫...");
        await baseDeployment.core.registerFeature(
            subscriptionModuleId,
            deployer.address, // –í—Ä–µ–º–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–±—Ä–∏–∫–∏
            1 // –≤–µ—Ä—Å–∏—è
        );
        console.log("‚úÖ –ú–æ–¥—É–ª—å –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
    }

    // –î–µ–ø–ª–æ–∏–º SubscriptionManagerFactory
    const subscriptionFactory = await deploySubscriptionManagerFactory(baseDeployment);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –º–æ–¥—É–ª—è –≤ CoreSystem –Ω–∞ –∞–¥—Ä–µ—Å —Ñ–∞–±—Ä–∏–∫–∏
    console.log("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –º–æ–¥—É–ª—è –≤ CoreSystem...");
    await baseDeployment.core.upgradeFeature(subscriptionModuleId, await subscriptionFactory.getAddress());
    console.log("‚úÖ –ê–¥—Ä–µ—Å –º–æ–¥—É–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ñ–∞–±—Ä–∏–∫—É");

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–æ–ª–∏
    await setupSubscriptionRoles(baseDeployment.core, subscriptionFactory, deployer);

    // –°–æ–∑–¥–∞–µ–º SubscriptionManager —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
    const subscriptionManager = await createSubscriptionManager(subscriptionFactory);

    // –ü–æ–ª—É—á–∞–µ–º MODULE_ID
    const moduleId = await subscriptionManager.MODULE_ID();
    console.log("üìã Module ID:", moduleId);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
    await setupSubscriptionServices(baseDeployment, moduleId);
    await setupSubscriptionProcessors(baseDeployment, moduleId);
    await setupSubscriptionTokens(baseDeployment, moduleId);

    console.log("üéâ –î–µ–ø–ª–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");

    return {
        core: baseDeployment.core,
        gateway: baseDeployment.gateway,
        subscriptionFactory,
        subscriptionManager,
        testToken: baseDeployment.testToken,
        moduleId
    };
}

/**
 * –î–µ–ø–ª–æ–π SubscriptionManagerFactory
 */
export async function deploySubscriptionManagerFactory(baseDeployment: any): Promise<Contract> {
    console.log("üì¶ –î–µ–ø–ª–æ–π SubscriptionManagerFactory...");
    const SubscriptionManagerFactory = await ethers.getContractFactory("SubscriptionManagerFactory");
    const subscriptionFactory = await SubscriptionManagerFactory.deploy(
        await baseDeployment.core.getAddress(),
        await baseDeployment.gateway.getAddress()
    );
    await subscriptionFactory.waitForDeployment();
    console.log("‚úÖ SubscriptionManagerFactory –∑–∞–¥–µ–ø–ª–æ–µ–Ω:", await subscriptionFactory.getAddress());
    return subscriptionFactory;
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫
 */
export async function setupSubscriptionRoles(core: Contract, subscriptionFactory: Contract, deployer: Signer): Promise<void> {
    console.log("üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫...");
    
    const featureOwnerRole = ethers.keccak256(ethers.toUtf8Bytes("FEATURE_OWNER_ROLE"));
    const deployerAddress = await deployer.getAddress();
    const factoryAddress = await subscriptionFactory.getAddress();

    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –¥–µ–ø–ª–æ–µ—Ä–∞ –µ—Å—Ç—å —Ä–æ–ª—å FEATURE_OWNER_ROLE
    const deployerHasRole = await core.hasRole(featureOwnerRole, deployerAddress);
    if (!deployerHasRole) {
        console.log("‚ö†Ô∏è –í—ã–¥–∞—á–∞ —Ä–æ–ª–∏ FEATURE_OWNER_ROLE –¥–µ–ø–ª–æ–µ—Ä—É...");
        await core.grantRole(featureOwnerRole, deployerAddress);
        console.log("‚úÖ –†–æ–ª—å FEATURE_OWNER_ROLE –≤—ã–¥–∞–Ω–∞ –¥–µ–ø–ª–æ–µ—Ä—É");
    } else {
        console.log("‚úÖ –†–æ–ª—å FEATURE_OWNER_ROLE —É–∂–µ –µ—Å—Ç—å —É –¥–µ–ø–ª–æ–µ—Ä–∞");
    }

    // –í—ã–¥–∞–µ–º —Ä–æ–ª—å FEATURE_OWNER_ROLE —Ñ–∞–±—Ä–∏–∫–µ
    const factoryHasRole = await core.hasRole(featureOwnerRole, factoryAddress);
    if (!factoryHasRole) {
        console.log("‚ö†Ô∏è –í—ã–¥–∞—á–∞ —Ä–æ–ª–∏ FEATURE_OWNER_ROLE —Ñ–∞–±—Ä–∏–∫–µ...");
        await core.grantRole(featureOwnerRole, factoryAddress);
        console.log("‚úÖ –†–æ–ª—å FEATURE_OWNER_ROLE –≤—ã–¥–∞–Ω–∞ —Ñ–∞–±—Ä–∏–∫–µ");
    } else {
        console.log("‚úÖ –†–æ–ª—å FEATURE_OWNER_ROLE —É–∂–µ –µ—Å—Ç—å —É —Ñ–∞–±—Ä–∏–∫–∏");
    }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ SubscriptionManager —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
 */
export async function createSubscriptionManager(subscriptionFactory: Contract): Promise<Contract> {
    console.log("üè≠ –°–æ–∑–¥–∞–Ω–∏–µ SubscriptionManager —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É...");
    const tx = await subscriptionFactory.createSubscriptionManager();
    const receipt = await tx.wait();

    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ SubscriptionManager –∏–∑ —Å–æ–±—ã—Ç–∏—è
    const event = receipt.logs.find((log: any) => {
        try {
            const parsed = subscriptionFactory.interface.parseLog(log);
            return parsed?.name === "SubscriptionManagerCreated";
        } catch {
            return false;
        }
    });

    if (!event) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ SubscriptionManagerCreated");
    }

    const parsedEvent = subscriptionFactory.interface.parseLog(event);
    const subscriptionManagerAddress = parsedEvent.args.subManager;

    console.log("‚úÖ SubscriptionManager —Å–æ–∑–¥–∞–Ω:", subscriptionManagerAddress);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É SubscriptionManager
    return await ethers.getContractAt("SubscriptionManager", subscriptionManagerAddress);
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è SubscriptionManager
 */
export async function setupSubscriptionServices(baseDeployment: any, moduleId: string): Promise<void> {
    console.log("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è SubscriptionManager...");
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º PaymentGateway
    await baseDeployment.core.setService(
        moduleId,
        "PaymentGateway",
        await baseDeployment.gateway.getAddress()
    );
    console.log("‚úÖ PaymentGateway –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è SubscriptionManager");
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –¥–ª—è –º–æ–¥—É–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
 */
export async function setupSubscriptionProcessors(baseDeployment: any, moduleId: string): Promise<void> {
    console.log("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –¥–ª—è –º–æ–¥—É–ª—è –ø–æ–¥–ø–∏—Å–æ–∫...");

    // –ü–æ–ª—É—á–∞–µ–º orchestrator –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –¥–µ–ø–ª–æ—è
    const orchestratorAddress = await baseDeployment.gateway.orchestrator();
    const orchestrator = await ethers.getContractAt("PaymentOrchestrator", orchestratorAddress);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º TokenFilter –¥–ª—è –º–æ–¥—É–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
    await orchestrator.configureProcessor(
        moduleId,
        "TokenFilter",
        true,
        "0x"
    );
    console.log("‚úÖ TokenFilter –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –º–æ–¥—É–ª—è –ø–æ–¥–ø–∏—Å–æ–∫");

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º FeeProcessor –¥–ª—è –º–æ–¥—É–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
    await orchestrator.configureProcessor(
        moduleId,
        "FeeProcessor", 
        true,
        "0x"
    );
    console.log("‚úÖ FeeProcessor –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –º–æ–¥—É–ª—è –ø–æ–¥–ø–∏—Å–æ–∫");
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–¥—É–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
 */
export async function setupSubscriptionTokens(baseDeployment: any, moduleId: string): Promise<void> {
    console.log("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–¥—É–ª—è –ø–æ–¥–ø–∏—Å–æ–∫...");

    const orchestratorAddress = await baseDeployment.gateway.orchestrator();
    const orchestrator = await ethers.getContractAt("PaymentOrchestrator", orchestratorAddress);

    // –°–æ–∑–¥–∞–µ–º configData —Å –∞–¥—Ä–µ—Å–∞–º–∏ —Ç–æ–∫–µ–Ω–æ–≤ (–ø–æ 20 –±–∞–π—Ç –∫–∞–∂–¥—ã–π)
    const ethAddress = ethers.ZeroAddress;
    const testTokenAddress = await baseDeployment.testToken.getAddress();

    // –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å–∞ –≤ configData (–∫–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å 20 –±–∞–π—Ç)
    const configData = ethers.concat([
        ethers.getBytes(ethAddress).slice(-20), // ETH address (20 bytes)
        ethers.getBytes(testTokenAddress).slice(-20) // Test token address (20 bytes)
    ]);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º TokenFilter —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–ª—è –º–æ–¥—É–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
    await orchestrator.configureProcessor(
        moduleId,
        "TokenFilter",
        true,
        configData
    );
    console.log("‚úÖ –¢–æ–∫–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –º–æ–¥—É–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ (ETH –∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω)");
}

/**
 * –ë—ã—Å—Ç—Ä—ã–π –¥–µ–ø–ª–æ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
export async function deploySubscriptionContractsQuick(): Promise<SubscriptionDeployment> {
    const [deployer] = await ethers.getSigners();
    const baseDeployment = await getOrDeployContracts();
    
    const subscriptionModuleId = ethers.keccak256(ethers.toUtf8Bytes("SubscriptionManager"));
    
    try {
        await baseDeployment.core.getFeature(subscriptionModuleId);
    } catch {
        await baseDeployment.core.registerFeature(subscriptionModuleId, deployer.address, 1);
    }

    const subscriptionFactory = await deploySubscriptionManagerFactory(baseDeployment);
    await baseDeployment.core.upgradeFeature(subscriptionModuleId, await subscriptionFactory.getAddress());
    await setupSubscriptionRoles(baseDeployment.core, subscriptionFactory, deployer);
    
    const subscriptionManager = await createSubscriptionManager(subscriptionFactory);
    const moduleId = await subscriptionManager.MODULE_ID();
    
    await setupSubscriptionServices(baseDeployment, moduleId);
    await setupSubscriptionProcessors(baseDeployment, moduleId);
    await setupSubscriptionTokens(baseDeployment, moduleId);

    return {
        core: baseDeployment.core,
        gateway: baseDeployment.gateway,
        subscriptionFactory,
        subscriptionManager,
        testToken: baseDeployment.testToken,
        moduleId
    };
}