/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
 *
 * –°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞,
 * —É—Å—Ç—Ä–∞–Ω—è—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.
 */

import {ethers} from "hardhat";
import {Signer, TransactionReceipt} from "ethers";
import {DeploymentResult} from "../utils/deploy";
import {createListing, purchaseListing, Product} from "../utils/marketplace";
import {
    getAccountBalances,
    displayBalances,
    calculateBalanceChanges,
    displayBalanceChanges,
    analyzeFees,
    prepareTokensForTesting,
    checkSufficientBalance,
    BalanceInfo,
    BalanceChange
} from "../utils/balance";

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export interface ScenarioResult {
    name: string;
    success: boolean;
    details: ScenarioDetails;
    error?: string;
}

/**
 * –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è
 */
export interface ScenarioDetails {
    productPrice: string;
    currency: string;
    sellerEarned: string;
    buyerSpent: string;
    gatewayEarned: string;
    fees: any;
    transactionHash?: string;
    gasUsed?: string;
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export interface ScenarioConfig {
    name: string;
    description: string;
    product: Product;
    tokenSymbols?: Map<string, string>;
    prepareTokens?: boolean;
    tokenAmount?: bigint;
}

/**
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∏—Å—Ç–∏–Ω–≥–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
 */
export interface ListingWithSignature {
    listing: any;
    signature: string;
}

/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
 * –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
 */
export abstract class BaseScenario {
    protected deployment: DeploymentResult;
    protected seller: Signer;
    protected buyer: Signer;
    protected config: ScenarioConfig;

    constructor(
        deployment: DeploymentResult,
        seller: Signer,
        buyer: Signer,
        config: ScenarioConfig
    ) {
        this.deployment = deployment;
        this.seller = seller;
        this.buyer = buyer;
        this.config = config;
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ–±—â–µ–π –ª–æ–≥–∏–∫–æ–π
     *
     * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
     */
    async execute(): Promise<ScenarioResult> {
        console.log(`\nüß™ ${this.config.name}`);
        console.log("=".repeat(50));
        console.log(`üìù ${this.config.description}`);

        try {
            // –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const sellerAddress = await this.seller.getAddress();
            const buyerAddress = await this.buyer.getAddress();

            console.log("\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:");
            console.log(`  –ü—Ä–æ–¥–∞–≤–µ—Ü: ${sellerAddress}`);
            console.log(`  –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${buyerAddress}`);

            // –®–∞–≥ 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
            if (this.config.prepareTokens && this.config.tokenAmount) {
                await this.prepareTokens();
            }

            // –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤
            const tokenAddresses = this.getTokenAddresses();
            const sellerBalanceBefore = await getAccountBalances(sellerAddress, tokenAddresses);
            const buyerBalanceBefore = await getAccountBalances(buyerAddress, tokenAddresses);
            const gatewayBalanceBefore = await getAccountBalances(await this.deployment.gateway.getAddress(), tokenAddresses);

            console.log("\nüí∞ –ù–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:");
            await displayBalances(sellerBalanceBefore, this.config.tokenSymbols);
            await displayBalances(buyerBalanceBefore, this.config.tokenSymbols);

            // –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)
            const {listing, signature} = await this.createListing();

            // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
            const sufficient = await checkSufficientBalance(
                buyerAddress,
                this.config.product.tokenAddress,
                listing.price
            );

            if (!sufficient) {
                throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è");
            }

            console.log("\nüõí –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏...");

            // –®–∞–≥ 6: –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞
            const receipt = await purchaseListing(
                this.deployment.marketplace,
                this.buyer,
                listing,
                signature,
                this.config.product.tokenAddress,
                this.deployment.gateway
            );

            // –®–∞–≥ 7: –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π (–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ –∫–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π)
            const fees = await analyzeFees(receipt, this.deployment.marketplace);

            // –®–∞–≥ 8: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤
            const sellerBalanceAfter = await getAccountBalances(sellerAddress, tokenAddresses);
            const buyerBalanceAfter = await getAccountBalances(buyerAddress, tokenAddresses);
            const gatewayBalanceAfter = await getAccountBalances(await this.deployment.gateway.getAddress(), tokenAddresses);

            console.log("\nüí∞ –§–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:");
            await displayBalances(sellerBalanceAfter, this.config.tokenSymbols);
            await displayBalances(buyerBalanceAfter, this.config.tokenSymbols);

            // –®–∞–≥ 9: –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–æ–≤
            const sellerChanges = calculateBalanceChanges(sellerBalanceBefore, sellerBalanceAfter);
            const buyerChanges = calculateBalanceChanges(buyerBalanceBefore, buyerBalanceAfter);
            const gatewayChanges = calculateBalanceChanges(gatewayBalanceBefore, gatewayBalanceAfter);

            console.log("\nüìä –ò–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤:");
            console.log("–ü—Ä–æ–¥–∞–≤–µ—Ü:");
            displayBalanceChanges(sellerChanges, this.config.tokenSymbols);
            console.log("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:");
            displayBalanceChanges(buyerChanges, this.config.tokenSymbols);

            // –®–∞–≥ 10: –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π
            this.analyzeCommissions(sellerChanges, buyerChanges, gatewayChanges, listing.price);

            console.log(`\n‚úÖ ${this.config.name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);

            return {
                name: this.config.name,
                success: true,
                details: this.buildResultDetails(listing, sellerChanges, buyerChanges, gatewayChanges, fees, receipt),
                error: undefined
            };

        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏: ${error}`);
            return {
                name: this.config.name,
                success: false,
                details: {
                    productPrice: "0",
                    currency: "N/A",
                    sellerEarned: "0",
                    buyerSpent: "0",
                    gatewayEarned: "0",
                    fees: null
                },
                error: error instanceof Error ? error.message : String(error)
            };
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
     */
    protected async prepareTokens(): Promise<void> {
        if (!this.config.tokenAmount) return;

        console.log("\nü™ô –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è...");
        await prepareTokensForTesting(
            this.deployment.testToken,
            this.buyer,
            await this.deployment.marketplace.getAddress(),
            this.config.tokenAmount
        );
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
     */
    protected getTokenAddresses(): string[] {
        const addresses: string[] = [];
        if (this.config.product.tokenAddress !== ethers.ZeroAddress) {
            addresses.push(this.config.product.tokenAddress);
        }
        return addresses;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)
     *
     * @returns –õ–∏—Å—Ç–∏–Ω–≥ —Å –ø–æ–¥–ø–∏—Å—å—é –ø—Ä–æ–¥–∞–≤—Ü–∞
     */
    protected async createListing(): Promise<ListingWithSignature> {
        return await createListing(this.deployment.marketplace, this.seller, this.config.product);
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π (–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π)
     *
     * @param sellerChanges –ò–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
     * @param buyerChanges –ò–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
     * @param gatewayChanges –ò–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ gateway
     * @param listingPrice –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –ª–∏—Å—Ç–∏–Ω–≥–µ
     */
    protected analyzeCommissions(
        sellerChanges: BalanceChange,
        buyerChanges: BalanceChange,
        gatewayChanges: BalanceChange,
        listingPrice: bigint
    ): void {
        console.log("\nüí∏ –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π:");

        const isNative = this.config.product.tokenAddress === ethers.ZeroAddress;

        if (isNative) {
            const totalPaid = -buyerChanges.nativeChange;
            const sellerReceived = sellerChanges.nativeChange;
            const gatewayReceived = gatewayChanges.nativeChange;
            const estimatedFees = totalPaid - sellerReceived;

            console.log(`  –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –∑–∞–ø–ª–∞—Ç–∏–ª: ${ethers.formatEther(totalPaid)} ETH`);
            console.log(`  –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–ª—É—á–∏–ª: ${ethers.formatEther(sellerReceived)} ETH`);
            console.log(`  Gateway –ø–æ–ª—É—á–∏–ª: ${ethers.formatEther(gatewayReceived)} ETH`);
            console.log(`  –†–∞—Å—á–µ—Ç–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏: ${ethers.formatEther(estimatedFees)} ETH`);
            console.log(`  –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: ${ethers.formatEther(listingPrice)} ETH`);
        } else {
            const tokenAddress = this.config.product.tokenAddress;
            const totalPaid = -(buyerChanges.tokenChanges.get(tokenAddress) || 0n);
            const sellerReceived = sellerChanges.tokenChanges.get(tokenAddress) || 0n;
            const gatewayReceived = gatewayChanges.tokenChanges.get(tokenAddress) || 0n;
            const estimatedFees = totalPaid - sellerReceived;

            const symbol = this.config.tokenSymbols?.get(tokenAddress) || "TOKEN";
            console.log(`  –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –∑–∞–ø–ª–∞—Ç–∏–ª: ${ethers.formatEther(totalPaid)} ${symbol}`);
            console.log(`  –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–ª—É—á–∏–ª: ${ethers.formatEther(sellerReceived)} ${symbol}`);
            console.log(`  Gateway –ø–æ–ª—É—á–∏–ª: ${ethers.formatEther(gatewayReceived)} ${symbol}`);
            console.log(`  –†–∞—Å—á–µ—Ç–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏: ${ethers.formatEther(estimatedFees)} ${symbol}`);
            console.log(`  –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: ${ethers.formatEther(listingPrice)} ${symbol}`);
        }
    }


    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏—è
     *
     * @param listing –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Å—Ç–∏–Ω–≥–µ
     * @param sellerChanges –ò–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
     * @param buyerChanges –ò–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
     * @param gatewayChanges –ò–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ gateway
     * @param fees –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∏—Å—Å–∏—è—Ö
     * @param receipt –ö–≤–∏—Ç–∞–Ω—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     * @returns –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
     */
    protected buildResultDetails(
        listing: any,
        sellerChanges: BalanceChange,
        buyerChanges: BalanceChange,
        gatewayChanges: BalanceChange,
        fees: any,
        receipt: TransactionReceipt | null
    ): ScenarioDetails {
        const isNative = this.config.product.tokenAddress === ethers.ZeroAddress;

        if (isNative) {
            return {
                productPrice: ethers.formatEther(listing.price),
                currency: "ETH",
                sellerEarned: ethers.formatEther(sellerChanges.nativeChange),
                buyerSpent: ethers.formatEther(-buyerChanges.nativeChange),
                gatewayEarned: ethers.formatEther(gatewayChanges.nativeChange),
                fees: fees,
                transactionHash: receipt?.hash
            };
        } else {
            const tokenAddress = this.config.product.tokenAddress;
            const symbol = this.config.tokenSymbols?.get(tokenAddress) || "TOKEN";

            return {
                productPrice: ethers.formatEther(listing.price),
                currency: symbol,
                sellerEarned: ethers.formatEther(sellerChanges.tokenChanges.get(tokenAddress) || 0n),
                buyerSpent: ethers.formatEther(-(buyerChanges.tokenChanges.get(tokenAddress) || 0n)),
                gatewayEarned: ethers.formatEther(gatewayChanges.tokenChanges.get(tokenAddress) || 0n),
                fees: fees,
                transactionHash: receipt?.hash
            };
        }
    }
}
