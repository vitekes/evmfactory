/**
 * –°–¶–ï–ù–ê–†–ò–ô 2: –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ –≤ —Ç–æ–∫–µ–Ω–µ (ERC20)
 * 
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞ –∑–∞ ERC20 —Ç–æ–∫–µ–Ω—ã, –≤–∫–ª—é—á–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É —Ç–æ–∫–µ–Ω–æ–≤,
 * –≤—ã–¥–∞—á—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (approve) –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∏—Å—Å–∏–π –≤ —Ç–æ–∫–µ–Ω–∞—Ö.
 * 
 * –û–°–ù–û–í–ù–´–ï –≠–¢–ê–ü–´:
 * 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞
 * 2. –ú–∏–Ω—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –∏ –≤—ã–¥–∞—á–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
 * 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
 * 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –ª–∏—Å—Ç–∏–Ω–≥–∞ —Å —Ü–µ–Ω–æ–π –≤ —Ç–æ–∫–µ–Ω–∞—Ö
 * 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
 * 6. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º —Ç–æ–∫–µ–Ω–æ–≤
 * 7. –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–æ–≤ –≤ —Ç–æ–∫–µ–Ω–∞—Ö
 * 8. –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * 
 * –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
 * - –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ —É–º–µ–Ω—å—à–∏–ª—Å—è –Ω–∞ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏
 * - –ü—Ä–æ–¥–∞–≤–µ—Ü: –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏ - –∫–æ–º–∏—Å—Å–∏–∏
 * - Gateway: –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ —Å—É–º–º—É –∫–æ–º–∏—Å—Å–∏–π
 * - ETH –±–∞–ª–∞–Ω—Å—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–∞–∑–∞
 */

import { ethers } from "hardhat";
import { Signer } from "ethers";
import { DeploymentResult } from "../utils/deploy";
import { Product } from "../utils/marketplace";
import { BaseScenario, ScenarioConfig, ScenarioResult } from "./base-scenario";
import { 
    BalanceChange, 
    BalanceInfo, 
    getAccountBalances, 
    calculateBalanceChanges 
} from "../utils/balance";

/**
 * –°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–∫—É–ø–∫–∏ –≤ —Ç–æ–∫–µ–Ω–µ (ERC20)
 */
export class TokenPurchaseScenario extends BaseScenario {

    private constructor(
        deployment: DeploymentResult,
        seller: Signer,
        buyer: Signer,
        config: ScenarioConfig
    ) {
        super(deployment, seller, buyer, config);
    }

    /**
     * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
     */
    static async create(
        deployment: DeploymentResult,
        seller: Signer,
        buyer: Signer
    ): Promise<TokenPurchaseScenario> {
        const tokenAddress = await deployment.testToken.getAddress();

        const product: Product = {
            id: 1002,
            price: ethers.parseEther("10"), // 10 DEMO —Ç–æ–∫–µ–Ω–æ–≤
            tokenAddress: tokenAddress,
            discount: 0
        };

        const tokenSymbols = new Map([
            [tokenAddress, "DEMO"]
        ]);

        const config: ScenarioConfig = {
            name: "–°–¶–ï–ù–ê–†–ò–ô 2: –ü–æ–∫—É–ø–∫–∞ –≤ —Ç–æ–∫–µ–Ω–µ (ERC20)",
            description: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∑–∞ ERC20 —Ç–æ–∫–µ–Ω—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ–º–∏—Å—Å–∏–π –≤ —Ç–æ–∫–µ–Ω–∞—Ö",
            product: product,
            tokenSymbols: tokenSymbols,
            prepareTokens: true,
            tokenAmount: ethers.parseEther("100") // 100 DEMO —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        };

        return new TokenPurchaseScenario(deployment, seller, buyer, config);
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ç–æ–∫–µ–Ω–∞–º–∏
     *
     * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥, –¥–æ–±–∞–≤–ª—è—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
     * –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å ERC20 —Ç–æ–∫–µ–Ω–∞–º–∏.
     */
    protected analyzeCommissions(
        sellerChanges: BalanceChange,
        buyerChanges: BalanceChange,
        gatewayChanges: BalanceChange,
        listingPrice: bigint
    ): void {
        // –í—ã–∑–æ–≤ –±–∞–∑–æ–≤–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        super.analyzeCommissions(sellerChanges, buyerChanges, gatewayChanges, listingPrice);

        console.log("\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ç–æ–∫–µ–Ω–∞—Ö:");

        const tokenAddress = this.config.product.tokenAddress;
        const symbol = this.config.tokenSymbols?.get(tokenAddress) || "TOKEN";

        // –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–æ–∫–µ–Ω–∞—Ö
        const totalPaid = -(buyerChanges.tokenChanges.get(tokenAddress) || 0n);
        const sellerReceived = sellerChanges.tokenChanges.get(tokenAddress) || 0n;
        const gatewayReceived = gatewayChanges.tokenChanges.get(tokenAddress) || 0n;

        console.log(`  –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ –ª–∏—Å—Ç–∏–Ω–≥—É: ${ethers.formatEther(listingPrice)} ${symbol}`);
        console.log(`  –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–ª–∞—á–µ–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º: ${ethers.formatEther(totalPaid)} ${symbol}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ —Ç–æ–∫–µ–Ω–∞—Ö
        if (totalPaid === listingPrice) {
            console.log("  ‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –∑–∞–ø–ª–∞—Ç–∏–ª —Ç–æ—á–Ω—É—é —Å—É–º–º—É –ø–æ –ª–∏—Å—Ç–∏–Ω–≥—É");
        } else {
            console.log(`  ‚ö†Ô∏è –†–∞–∑–Ω–∏—Ü–∞ –≤ –æ–ø–ª–∞—Ç–µ: ${ethers.formatEther(totalPaid - listingPrice)} ${symbol}`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤
        const totalReceived = sellerReceived + gatewayReceived;
        console.log(`  –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–ª—É—á–µ–Ω–∞ (–ø—Ä–æ–¥–∞–≤–µ—Ü + gateway): ${ethers.formatEther(totalReceived)} ${symbol}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Ç–µ—Ä—å)
        if (totalPaid === totalReceived) {
            console.log("  ‚úÖ –í—Å–µ —Ç–æ–∫–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –ø–æ—Ç–µ—Ä—å –Ω–µ—Ç");
        } else {
            const difference = totalPaid - totalReceived;
            console.log(`  ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ ${ethers.formatEther(difference)} ${symbol}`);
        }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
        const sellerEfficiency = (sellerReceived * 100n) / listingPrice;
        console.log(`  –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞: ${sellerEfficiency}% –æ—Ç —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –≤ —Ç–æ–∫–µ–Ω–∞—Ö
        const tokenFees = totalPaid - sellerReceived;
        const feePercentage = (tokenFees * 10000n) / listingPrice; // –í –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö
        console.log(`  –ö–æ–º–∏—Å—Å–∏–∏ –≤ —Ç–æ–∫–µ–Ω–∞—Ö: ${ethers.formatEther(tokenFees)} ${symbol} (${feePercentage} bp)`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∏—è–Ω–∏–µ –Ω–∞ ETH –±–∞–ª–∞–Ω—Å—ã (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≥–∞–∑)
        console.log("\nüí® –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –≥–∞–∑:");
        console.log(`  –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ –≥–∞–∑: ${ethers.formatEther(-sellerChanges.nativeChange)} ETH`);
        console.log(`  –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ –≥–∞–∑: ${ethers.formatEther(-buyerChanges.nativeChange)} ETH`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
        this.checkTokenAllowances().catch(error => {
            console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: ${error}`);
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     */
    private async checkTokenAllowances(): Promise<void> {
        console.log("\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤:");

        const buyerAddress = await this.buyer.getAddress();
        const marketplaceAddress = await this.deployment.marketplace.getAddress();

        try {
            const allowance = await this.deployment.testToken.allowance(buyerAddress, marketplaceAddress);
            console.log(`  –û—Å—Ç–∞–≤—à–µ–µ—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: ${ethers.formatEther(allowance)} DEMO`);

            const buyerBalance = await this.deployment.testToken.balanceOf(buyerAddress);
            console.log(`  –û—Å—Ç–∞–≤—à–∏–π—Å—è –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: ${ethers.formatEther(buyerBalance)} DEMO`);

            if (allowance > buyerBalance) {
                console.log("  ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ");
            } else if (allowance === 0n) {
                console.log("  ‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ");
            } else {
                console.log("  ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏ –±–∞–ª–∞–Ω—Å –≤ –ø–æ—Ä—è–¥–∫–µ");
            }
        } catch (error) {
            console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: ${error}`);
        }
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */
export async function testTokenPurchase(
    deployment: DeploymentResult,
    seller: Signer,
    buyer: Signer
): Promise<ScenarioResult> {
    const scenario = await TokenPurchaseScenario.create(deployment, seller, buyer);
    return await scenario.execute();
}
